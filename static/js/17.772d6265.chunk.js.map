{"version":3,"sources":["redux/actions/UserList.ts","modules/user/ContactListing/ContactHeader/CheckBox.tsx","modules/user/ContactListing/ContactHeader/ContactCheckedActions.tsx","modules/user/ContactListing/ContactHeader/ViewSelectButtons.tsx","modules/user/ContactListing/ContactHeader/index.tsx","modules/user/CreateContact/AddContactForm.tsx","modules/user/CreateContact/index.tsx","modules/user/ContactListing/ContactViewContent/ItemMenu.tsx","modules/user/ContactListing/ContactViewContent/ContactGridItem.tsx","modules/user/ContactListing/ContactViewContent/ContactListItem.tsx","modules/user/ContactListing/ContactViewContent/index.tsx","modules/user/ContactDetail/ContactActions.tsx","modules/user/ContactDetail/PersonalDetails.tsx","modules/user/ContactDetail/SocialMedia.tsx","modules/user/ContactDetail/Notes.tsx","modules/user/ContactDetail/index.tsx","modules/user/ContactListing/index.tsx","modules/user/ContactSideBar/index.tsx","modules/user/UserList.tsx"],"names":["onUpdateSelectedContact","contact","messages","appIntl","dispatch","type","FETCH_START","Api","put","then","data","status","FETCH_SUCCESS","UPDATE_CONTACT_DETAIL","payload","SHOW_MESSAGE","FETCH_ERROR","catch","error","message","CheckBox","checkedContacts","setCheckedContacts","contactList","useSelector","userList","Box","mr","xs","xl","Checkbox","color","indeterminate","length","checked","onChange","event","target","contactIds","map","id","useStyles","makeStyles","pointer","cursor","display","ContactCheckedActions","onSelectContactsForDelete","useDispatch","useLocation","pathname","React","useState","onOpenLabel","classes","component","alignItems","Tooltip","title","IntlMessages","className","onClick","currentTarget","theme","root","palette","primary","main","ViewSelectButtons","pageView","onChangePageView","ml","IconButton","clsx","active","appsPaginationRoot","paddingLeft","paddingRight","ContactHeader","filterText","onSetFilterText","page","onPageChange","totalContacts","useIntl","flex","flexDirection","SearchBar","overlap","value","placeholder","Hidden","xsDown","AppsPagination","count","avatar","width","height","marginBottom","myTextField","breakpoints","up","btnRoot","fieldRoot","padding","backgroundColor","background","paper","text","widthFull","MyTextField","props","useField","field","meta","errorText","touched","TextField","helperText","AddContactForm","values","userImage","setUserImage","setFieldValue","handleAddContactClose","useDropzone","accept","onDrop","acceptedFiles","URL","createObjectURL","getRootProps","getInputProps","noValidate","autoComplete","p","borderBottom","grey","htmlFor","Avatar","src","fontWeight","Fonts","MEDIUM","name","Scrollbar","style","maxHeight","py","px","lg","pb","mb","fontSize","md","required","variant","label","autoOk","disableFuture","format","inputVariant","birthday","multiline","rows","bgcolor","Button","dialogBox","position","maxWidth","LIGHT","Transition","forwardRef","ref","Slide","direction","CreateContact","isAddContact","selectContact","onUpdateContact","image","validationSchema","yup","email","Dialog","open","onClose","aria-labelledby","TransitionComponent","aria-describedby","validateOnChange","initialValues","address","appleId","kakaoId","notes","onSubmit","setSubmitting","resetForm","newContact","isStarred","Math","floor","random","isFrequent","post","CREATE_NEW_CONTACT","onCreateContact","ItemMenu","onChangeStarred","onOpenEditContact","isMoreIcon","onOpenMoreIcon","onViewMoreClose","Menu","anchorEl","Boolean","MenuItem","gridCard","borderRadius","overrides","MuiCard","boxShadow","checkboxRoot","marginTop","marginLeft","blue","truncate","overflow","textOverflow","whiteSpace","textBase","ContactGridItem","onChangeCheckedContacts","onViewContactDetail","Card","justifyContent","stopPropagation","includes","toUpperCase","textAlign","borderTop","borderLeft","ContactListItem","paddingTop","paddingBottom","ListItem","dense","button","rootCheck","sm","AppsStarredIcon","item","ContactViewContent","list","loading","handleAddContactOpen","AppList","animation","ListEmptyComponent","ListEmptyResult","actionTitle","ContactListSkeleton","renderRow","AppGrid","responsive","ContactActions","onDeleteContact","borderBottomClass","iconRoot","PersonalDetails","pr","SocialMedia","textareaAutosizeRoot","Notes","m","disabled","ContactDetail","isShowDetail","selectedContact","onShowDetail","setContact","useEffect","updatedContact","mt","pl","lx","ContactListing","setPage","setPageView","isDeleteDialogOpen","setDeleteDialogOpen","toDeleteContacts","setToDeleteContacts","onSetIsAddContact","setSelectedContact","common","path","split","currentPage","get","params","GET_CONTACT_LIST","onGetContactList","filter","AppsHeader","view","AppsContent","concat","contactId","selectedIdList","folderName","UPDATE_CONTACT_STARRED_STATUS","onUpdateStarredStatus","smUp","AppsFooter","ConfirmationDialog","onDeny","onConfirm","DELETE_CONTACT","onDeleteContacts","dialogTitle","textTransform","listRoot","SideBarContent","folderList","pt","AppAnimate","aria-label","AppsSideBarFolderItem","alias","Contact","GET_CONTACT_FOLDER_LIST","onGetFolderList","AppsContainer","sidebarContent"],"mappings":"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","file":"static/js/17.772d6265.chunk.js","sourcesContent":["import { Dispatch } from 'redux';\nimport Api from '../../@crema/services/ApiConfig';\nimport { appIntl } from '../../@crema/utility/Utils';\nimport {\n  FETCH_ERROR,\n  FETCH_START,\n  FETCH_SUCCESS,\n  SHOW_MESSAGE\n} from '../../types/actions/Common.action';\nimport {\n  CREATE_NEW_CONTACT,\n  DELETE_CONTACT,\n  GET_CONTACT_FOLDER_LIST,\n  GET_CONTACT_LIST,\n  TOGGLE_CONTACT_DRAWER,\n  UPDATE_CONTACT_DETAIL,\n  UPDATE_CONTACT_STARRED_STATUS\n} from '../../types/actions/UserList.action';\nimport { AppActions } from './../../types/index';\n\nexport const onGetContactList = (\n  type: string,\n  name: string,\n  currentPage: number,\n) => {\n  const {messages} = appIntl();\n  const page = currentPage ? currentPage : 0;\n  return (dispatch: Dispatch<AppActions>) => {\n    dispatch({type: FETCH_START});\n    Api.get('/api/contactApp/contact/List', {\n      params: {\n        type: type,\n        name: name,\n        page: page,\n      },\n    })\n      .then((data) => {\n        if (data.status === 200) {\n          dispatch({type: FETCH_SUCCESS});\n          dispatch({type: GET_CONTACT_LIST, payload: data.data});\n        } else {\n          dispatch({\n            type: FETCH_ERROR,\n            payload: messages['message.somethingWentWrong'],\n          });\n        }\n      })\n      .catch((error) => {\n        dispatch({type: FETCH_ERROR, payload: error.message});\n      });\n  };\n};\n\nexport const onGetFolderList = () => {\n  const {messages} = appIntl();\n  return (dispatch: Dispatch<AppActions>) => {\n    dispatch({type: FETCH_START});\n    Api.get('/api/contactApp/folders/list')\n      .then((data) => {\n        if (data.status === 200) {\n          dispatch({type: FETCH_SUCCESS});\n          dispatch({type: GET_CONTACT_FOLDER_LIST, payload: data.data});\n        } else {\n          dispatch({\n            type: FETCH_ERROR,\n            payload: messages['message.somethingWentWrong'],\n          });\n        }\n      })\n      .catch((error) => {\n        dispatch({type: FETCH_ERROR, payload: error.message});\n      });\n  };\n};\n\nexport const onToggleContactDrawer = () => {\n  return (dispatch: Dispatch<AppActions>) => {\n    dispatch({type: TOGGLE_CONTACT_DRAWER});\n  };\n};\n\nexport const onUpdateStarredStatus = (\n  contactIds: number[],\n  status: boolean,\n  folderName: string,\n) => {\n  const {messages} = appIntl();\n  return (dispatch: Dispatch<AppActions>) => {\n    dispatch({type: FETCH_START});\n    Api.put('/api/contactApp/update/starred', {contactIds, status})\n      .then((data) => {\n        if (data.status === 200) {\n          dispatch({type: FETCH_SUCCESS});\n          dispatch({\n            type: UPDATE_CONTACT_STARRED_STATUS,\n            payload: {data: data.data, folderName: folderName},\n          });\n          dispatch({\n            type: SHOW_MESSAGE,\n            payload: messages['message.starredStatus'],\n          });\n        } else {\n          dispatch({\n            type: FETCH_ERROR,\n            payload: messages['message.somethingWentWrong'],\n          });\n        }\n      })\n      .catch((error) => {\n        dispatch({type: FETCH_ERROR, payload: error.message});\n      });\n  };\n};\n\nexport const onDeleteContacts = (\n  type: string,\n  name: string,\n  contactIds: number[],\n  page: number,\n) => {\n  const {messages} = appIntl();\n  return (dispatch: Dispatch<AppActions>) => {\n    dispatch({type: FETCH_START});\n    Api.post('/api/contactApp/delete/contact', {type, name, contactIds, page})\n      .then((data) => {\n        if (data.status === 200) {\n          dispatch({type: FETCH_SUCCESS});\n          dispatch({type: DELETE_CONTACT, payload: data.data});\n          dispatch({\n            type: SHOW_MESSAGE,\n            payload: messages['message.contactDeleted'],\n          });\n        } else {\n          dispatch({\n            type: FETCH_ERROR,\n            payload: messages['message.somethingWentWrong'],\n          });\n        }\n      })\n      .catch((error) => {\n        dispatch({type: FETCH_ERROR, payload: error.message});\n      });\n  };\n};\n\nexport const onUpdateSelectedContact = (contact: any) => {\n  const {messages} = appIntl();\n  return (dispatch: Dispatch<AppActions>) => {\n    dispatch({type: FETCH_START});\n    Api.put('/api/contactApp/contact/', {contact})\n      .then((data) => {\n        if (data.status === 200) {\n          dispatch({type: FETCH_SUCCESS});\n          dispatch({type: UPDATE_CONTACT_DETAIL, payload: data.data});\n          dispatch({\n            type: SHOW_MESSAGE,\n            payload: messages['message.contactUpdated'],\n          });\n        } else {\n          dispatch({\n            type: FETCH_ERROR,\n            payload: messages['message.somethingWentWrong'],\n          });\n        }\n      })\n      .catch((error) => {\n        dispatch({type: FETCH_ERROR, payload: error.message});\n      });\n  };\n};\n\nexport const onCreateContact = (contact: any) => {\n  const {messages} = appIntl();\n  return (dispatch: Dispatch<AppActions>) => {\n    dispatch({type: FETCH_START});\n    Api.post('/api/contactApp/compose', {contact})\n      .then((data) => {\n        if (data.status === 200) {\n          dispatch({type: FETCH_SUCCESS});\n          dispatch({type: CREATE_NEW_CONTACT, payload: data.data});\n          dispatch({\n            type: SHOW_MESSAGE,\n            payload: messages['message.contactCreated'],\n          });\n        } else {\n          dispatch({\n            type: FETCH_ERROR,\n            payload: messages['message.somethingWentWrong'],\n          });\n        }\n      })\n      .catch((error) => {\n        dispatch({type: FETCH_ERROR, payload: error.message});\n      });\n  };\n};\n","import React from 'react';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Box from '@material-ui/core/Box';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppState} from '../../../../redux/store';\r\nimport {UserListObj} from '../../../../types/models/apps/UserList';\r\n\r\ninterface CheckBoxProps {\r\n  checkedContacts: number[];\r\n  setCheckedContacts: (contactIds: number[]) => void;\r\n}\r\n\r\nconst CheckBox: React.FC<CheckBoxProps> = ({\r\n  checkedContacts,\r\n  setCheckedContacts,\r\n}) => {\r\n  const {contactList}: {contactList: UserListObj[]} = useSelector<\r\n    AppState,\r\n    AppState['userList']\r\n  >(({userList}) => userList);\r\n\r\n  const onHandleMasterCheckbox = (\r\n    event: React.ChangeEvent<HTMLInputElement>,\r\n  ) => {\r\n    if (event.target.checked) {\r\n      const contactIds = contactList.map(contact => contact.id);\r\n      setCheckedContacts(contactIds);\r\n    } else {\r\n      setCheckedContacts([]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box mr={{xs: 1, xl: 2}}>\r\n      <Checkbox\r\n        color='primary'\r\n        indeterminate={\r\n          checkedContacts.length > 0 &&\r\n          checkedContacts.length < contactList.length\r\n        }\r\n        checked={\r\n          contactList.length > 0 &&\r\n          checkedContacts.length === contactList.length\r\n        }\r\n        onChange={onHandleMasterCheckbox}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CheckBox;\r\n","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IntlMessages from '../../../../@crema/utility/IntlMessages';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport DeleteSharpIcon from '@material-ui/icons/DeleteSharp';\r\nimport LabelSharpIcon from '@material-ui/icons/LabelSharp';\r\nimport {useDispatch} from 'react-redux';\r\nimport {useLocation} from 'react-router-dom';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  pointer: {\r\n    cursor: 'pointer',\r\n    display: 'block',\r\n  },\r\n}));\r\n\r\ninterface ContactCheckedActionsProps {\r\n  checkedContacts: number[];\r\n  setCheckedContacts: (checkedContacts: number[]) => void;\r\n  onSelectContactsForDelete: (checkedContacts: number[]) => void;\r\n}\r\n\r\nconst ContactCheckedActions: React.FC<ContactCheckedActionsProps> = ({\r\n  checkedContacts,\r\n  setCheckedContacts,\r\n  onSelectContactsForDelete,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const {pathname} = useLocation();\r\n\r\n  const [isLabelOpen, onOpenLabel] = React.useState<null | HTMLElement>(null);\r\n\r\n  const onLabelOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    onOpenLabel(event.currentTarget);\r\n  };\r\n\r\n  const onLabelClose = () => {\r\n    onOpenLabel(null);\r\n  };\r\n\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box component='span' display='flex' alignItems='center' mr={{xl: 4}}>\r\n      <Tooltip title={<IntlMessages id='common.delete' />}>\r\n        <Box mr={4} component='span' color='text.secondary'>\r\n          <DeleteSharpIcon\r\n            className={classes.pointer}\r\n            onClick={() => onSelectContactsForDelete(checkedContacts)}\r\n          />\r\n        </Box>\r\n      </Tooltip>\r\n\r\n      <Tooltip title={<IntlMessages id='common.label' />}>\r\n        <Box\r\n          mr={4}\r\n          component='span'\r\n          color='text.secondary'\r\n          onClick={onLabelOpen}>\r\n          <LabelSharpIcon className={classes.pointer} />\r\n        </Box>\r\n      </Tooltip>\r\n\r\n      {/* <Menu\r\n        anchorEl={isLabelOpen}\r\n        keepMounted\r\n        elevation={0}\r\n        open={Boolean(isLabelOpen)}\r\n        onClose={onLabelClose}>\r\n        <MenuItem value={311} onClick={onSelectLabel}>\r\n          <IntlMessages id='common.crema' />\r\n        </MenuItem>\r\n        <MenuItem value={312} onClick={onSelectLabel}>\r\n          <IntlMessages id='common.personal' />\r\n        </MenuItem>\r\n        <MenuItem value={313} onClick={onSelectLabel}>\r\n          <IntlMessages id='common.work' />\r\n        </MenuItem>\r\n      </Menu> */}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ContactCheckedActions;\r\n","import React from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AppsIcon from '@material-ui/icons/Apps';\r\nimport clsx from 'clsx';\r\nimport ListIcon from '@material-ui/icons/List';\r\nimport Box from '@material-ui/core/Box';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport {CremaTheme} from '../../../../types/AppContextPropsType';\r\n\r\nconst useStyles = makeStyles((theme: CremaTheme) => ({\r\n  root: {\r\n    cursor: 'pointer',\r\n    '&.active': {\r\n      color: theme.palette.primary.main,\r\n    },\r\n  },\r\n}));\r\n\r\ninterface ViewSelectButtonsProps {\r\n  pageView: string;\r\n  onChangePageView: (pageView: string) => void;\r\n}\r\n\r\nconst ViewSelectButtons: React.FC<ViewSelectButtonsProps> = ({\r\n  pageView,\r\n  onChangePageView,\r\n}) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Box display='flex' alignItems='center' ml='auto'>\r\n      <IconButton onClick={() => onChangePageView('grid')}>\r\n        <AppsIcon\r\n          className={clsx(classes.root, {\r\n            active: pageView === 'grid',\r\n          })}\r\n        />\r\n      </IconButton>\r\n\r\n      <IconButton onClick={() => onChangePageView('list')}>\r\n        <ListIcon\r\n          className={clsx(classes.root, {\r\n            active: pageView === 'list',\r\n          })}\r\n        />\r\n      </IconButton>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ViewSelectButtons;\r\n","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport Box from '@material-ui/core/Box';\r\nimport SearchBar from '../../../../@crema/core/SearchBar';\r\nimport {Hidden, makeStyles} from '@material-ui/core';\r\nimport {useIntl} from 'react-intl';\r\nimport CheckBox from './CheckBox';\r\nimport ContactCheckedActions from './ContactCheckedActions';\r\nimport ViewSelectButtons from './ViewSelectButtons';\r\nimport AppsPagination from '../../../../@crema/core/AppsPagination';\r\nimport {AppState} from '../../../../redux/store';\r\nimport {UserListObj} from '../../../../types/models/apps/UserList';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  appsPaginationRoot: {\r\n    paddingLeft: 8,\r\n    paddingRight: 8,\r\n  },\r\n}));\r\n\r\ninterface ContactHeaderProps {\r\n  checkedContacts: number[];\r\n  setCheckedContacts: (checkedContacts: number[]) => void;\r\n  filterText: string;\r\n  onSetFilterText: (filterText: string) => void;\r\n  onChangePageView: (pageView: string) => void;\r\n  onSelectContactsForDelete: (ids: number[]) => void;\r\n  page: number;\r\n  onPageChange: (\r\n    event: React.MouseEvent<HTMLButtonElement> | null,\r\n    page: number,\r\n  ) => void;\r\n  pageView: string;\r\n}\r\n\r\nconst ContactHeader: React.FC<ContactHeaderProps> = ({\r\n  checkedContacts,\r\n  setCheckedContacts,\r\n  filterText,\r\n  onSetFilterText,\r\n  onChangePageView,\r\n  onSelectContactsForDelete,\r\n  page,\r\n  onPageChange,\r\n  pageView,\r\n}) => {\r\n  const {\r\n    contactList,\r\n    totalContacts,\r\n  }: {contactList: UserListObj[]; totalContacts: number} = useSelector<\r\n    AppState,\r\n    AppState['userList']\r\n  >(({userList}) => userList);\r\n\r\n  const classes = useStyles();\r\n\r\n  const {messages} = useIntl();\r\n\r\n  return (\r\n    <>\r\n      <Box flex={1} display='flex' flexDirection='row' alignItems='center'>\r\n        <CheckBox\r\n          checkedContacts={checkedContacts}\r\n          setCheckedContacts={setCheckedContacts}\r\n        />\r\n\r\n        {checkedContacts.length > 0 ? (\r\n          <ContactCheckedActions\r\n            onSelectContactsForDelete={onSelectContactsForDelete}\r\n            checkedContacts={checkedContacts}\r\n            setCheckedContacts={setCheckedContacts}\r\n          />\r\n        ) : null}\r\n\r\n        <SearchBar\r\n          overlap={false}\r\n          value={filterText}\r\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\r\n            onSetFilterText(event.target.value)\r\n          }\r\n          placeholder={messages['common.searchHere'] as string}\r\n        />\r\n\r\n        <ViewSelectButtons\r\n          pageView={pageView}\r\n          onChangePageView={onChangePageView}\r\n        />\r\n      </Box>\r\n      <Hidden xsDown>\r\n        {contactList.length > 0 ? (\r\n          <AppsPagination\r\n            className={classes.appsPaginationRoot}\r\n            count={totalContacts}\r\n            page={page}\r\n            onPageChange={onPageChange}\r\n          />\r\n        ) : null}\r\n      </Hidden>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactHeader;\r\n","import {Box, Button} from '@material-ui/core';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport {grey} from '@material-ui/core/colors';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {KeyboardDatePicker} from '@material-ui/pickers';\r\nimport {Form, useField} from 'formik';\r\nimport React from 'react';\r\nimport {useDropzone} from 'react-dropzone';\r\nimport {useIntl} from 'react-intl';\r\nimport Scrollbar from '../../../@crema/core/Scrollbar';\r\nimport IntlMessages from '../../../@crema/utility/IntlMessages';\r\nimport {Fonts} from '../../../shared/constants/AppEnums';\r\nimport {CremaTheme} from '../../../types/AppContextPropsType';\r\nimport {UserListObj} from '../../../types/models/apps/UserList';\r\n\r\nconst useStyles = makeStyles((theme: CremaTheme) => ({\r\n  avatar: {\r\n    width: 55,\r\n    height: 55,\r\n    marginBottom: 8,\r\n    cursor: 'pointer',\r\n  },\r\n  myTextField: {\r\n    width: '100%',\r\n    marginBottom: 16,\r\n    [theme.breakpoints.up('xl')]: {\r\n      marginBottom: 24,\r\n    },\r\n  },\r\n  btnRoot: {\r\n    paddingLeft: 32,\r\n    paddingRight: 32,\r\n  },\r\n  fieldRoot: {\r\n    width: '100%',\r\n    padding: 16,\r\n    backgroundColor: theme.palette.background.paper,\r\n    color: theme.palette.text.primary,\r\n  },\r\n  widthFull: {\r\n    width: '100%',\r\n  },\r\n  pointer: {\r\n    cursor: 'pointer',\r\n  },\r\n}));\r\nconst MyTextField = (props: any) => {\r\n  const [field, meta] = useField(props);\r\n  const errorText = meta.error && meta.touched ? meta.error : '';\r\n  return (\r\n    <TextField\r\n      {...props}\r\n      {...field}\r\n      helperText={errorText}\r\n      error={!!errorText}\r\n    />\r\n  );\r\n};\r\n\r\ninterface AddContactFormProps {\r\n  values: UserListObj;\r\n  userImage: string;\r\n  setUserImage: (image: string) => void;\r\n  setFieldValue: (name: string, value: any) => void;\r\n  handleAddContactClose: () => void;\r\n}\r\n\r\nconst AddContactForm: React.FC<AddContactFormProps> = ({\r\n  values,\r\n  userImage,\r\n\r\n  setUserImage,\r\n  setFieldValue,\r\n  handleAddContactClose,\r\n}) => {\r\n  const {getRootProps, getInputProps} = useDropzone({\r\n    accept: 'image/*',\r\n    onDrop: (acceptedFiles) => {\r\n      setUserImage(URL.createObjectURL(acceptedFiles[0]));\r\n    },\r\n  });\r\n\r\n  const {messages} = useIntl();\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Form className='' noValidate autoComplete='off'>\r\n      <Box\r\n        p={5}\r\n        display='flex'\r\n        flexDirection='column'\r\n        alignItems='center'\r\n        borderBottom={`1px solid ${grey[300]}`}>\r\n        <Box {...getRootProps({className: 'dropzone'})}>\r\n          <input {...getInputProps()} />\r\n          <label htmlFor='icon-button-file'>\r\n            <Avatar className={classes.avatar} src={userImage} />\r\n          </label>\r\n        </Box>\r\n        <Box component='h4' fontWeight={Fonts.MEDIUM}>\r\n          {values.name}\r\n        </Box>\r\n      </Box>\r\n\r\n      <Scrollbar style={{maxHeight: 600}}>\r\n        <Box py={5} px={{xs: 5, lg: 8, xl: 10}}>\r\n          <Box pb={5} mb={5} borderBottom={`1px solid ${grey[300]}`}>\r\n            <Box\r\n              component='h6'\r\n              mb={{xs: 4, xl: 6}}\r\n              fontSize={16}\r\n              fontWeight={Fonts.MEDIUM}>\r\n              <IntlMessages id='contactApp.personalDetails' />\r\n            </Box>\r\n\r\n            <Box px={{md: 5, lg: 8, xl: 10}}>\r\n              <MyTextField\r\n                required={true}\r\n                className={classes.myTextField}\r\n                variant='outlined'\r\n                label={<IntlMessages id='common.name' />}\r\n                name='name'\r\n              />\r\n\r\n              <MyTextField\r\n                required={true}\r\n                className={classes.myTextField}\r\n                variant='outlined'\r\n                label={<IntlMessages id='common.email' />}\r\n                name='email'\r\n              />\r\n\r\n              <MyTextField\r\n                required={true}\r\n                className={classes.myTextField}\r\n                variant='outlined'\r\n                label={<IntlMessages id='common.phone' />}\r\n                name='contact'\r\n              />\r\n\r\n              <KeyboardDatePicker\r\n                autoOk\r\n                disableFuture\r\n                className={classes.myTextField}\r\n                format='MM/DD/YYYY'\r\n                inputVariant='outlined'\r\n                label={<IntlMessages id='common.birthday' />}\r\n                name='birthday'\r\n                value={values.birthday}\r\n                onChange={(value) => setFieldValue('birthday', value)}\r\n              />\r\n            </Box>\r\n          </Box>\r\n\r\n          <Box pb={5} mb={5} borderBottom={`1px solid ${grey[300]}`}>\r\n            <Box\r\n              component='h6'\r\n              mb={{xs: 4, xl: 6}}\r\n              fontWeight={Fonts.MEDIUM}\r\n              fontSize={16}>\r\n              <IntlMessages id='common.otherDetails' />\r\n            </Box>\r\n\r\n            <Box px={{md: 5, lg: 8, xl: 10}}>\r\n              <MyTextField\r\n                required={true}\r\n                className={classes.widthFull}\r\n                variant='outlined'\r\n                label={<IntlMessages id='common.address' />}\r\n                name='address'\r\n              />\r\n            </Box>\r\n          </Box>\r\n\r\n          <Box pb={5} mb={5} borderBottom={`1px solid ${grey[300]}`}>\r\n            <Box\r\n              component='h6'\r\n              mb={{xs: 4, xl: 6}}\r\n              fontWeight={Fonts.MEDIUM}\r\n              fontSize={16}>\r\n              <IntlMessages id='common.socialMedia' />\r\n            </Box>\r\n\r\n            <Box px={{md: 5, lg: 8, xl: 10}}>\r\n              <MyTextField\r\n                className={classes.myTextField}\r\n                variant='outlined'\r\n                label={<IntlMessages id='common.facebookId' />}\r\n                name='facebookId'\r\n              />\r\n\r\n              <MyTextField\r\n                className={classes.widthFull}\r\n                variant='outlined'\r\n                label={<IntlMessages id='common.twitterId' />}\r\n                name='twitterId'\r\n              />\r\n            </Box>\r\n          </Box>\r\n\r\n          <Box>\r\n            <Box component='h6' mb={2} fontWeight={Fonts.MEDIUM} fontSize={16}>\r\n              <IntlMessages id='common.notes' />\r\n            </Box>\r\n\r\n            <MyTextField\r\n              name='notes'\r\n              multiline\r\n              className={classes.fieldRoot}\r\n              rows='4'\r\n              variant='outlined'\r\n              placeholder={messages['common.notes']}\r\n            />\r\n          </Box>\r\n        </Box>\r\n\r\n        <Box px={8} py={4} bgcolor='grey.300'>\r\n          <Button\r\n            className={classes.btnRoot}\r\n            color='secondary'\r\n            variant='contained'\r\n            type='submit'>\r\n            <IntlMessages id='common.save' />\r\n          </Button>\r\n          <Button\r\n            className={classes.btnRoot}\r\n            color='secondary'\r\n            onClick={handleAddContactClose}>\r\n            <IntlMessages id='common.cancel' />\r\n          </Button>\r\n        </Box>\r\n      </Scrollbar>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default AddContactForm;\r\n","import React, {useState} from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport {Formik} from 'formik';\r\nimport * as yup from 'yup';\r\nimport {useDispatch} from 'react-redux';\r\nimport {Scrollbar} from '../../../@crema';\r\nimport {\r\n  onCreateContact,\r\n  onUpdateSelectedContact,\r\n} from '../../../redux/actions/UserList';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport AddContactForm from './AddContactForm';\r\nimport {Fonts} from '../../../shared/constants/AppEnums';\r\nimport {makeStyles} from '@material-ui/core/styles/index';\r\nimport {UserListObj} from '../../../types/models/apps/UserList';\r\nimport {TransitionProps} from '@material-ui/core/transitions';\r\nimport {useIntl} from 'react-intl';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  dialogBox: {\r\n    position: 'relative',\r\n    '& .MuiDialog-paperWidthSm': {\r\n      maxWidth: 600,\r\n      width: '100%',\r\n    },\r\n    '& .MuiTypography-h6': {\r\n      fontWeight: Fonts.LIGHT,\r\n    },\r\n  },\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n  props: TransitionProps & {children?: React.ReactElement<any, any>},\r\n  ref: React.Ref<unknown>,\r\n) {\r\n  return <Slide direction='up' ref={ref} {...props} />;\r\n});\r\n\r\ninterface CreateContactProps {\r\n  isAddContact: boolean;\r\n  handleAddContactClose: () => void;\r\n  selectContact?: UserListObj | null;\r\n  onUpdateContact?: (newContact: UserListObj) => void;\r\n}\r\n\r\nconst CreateContact: React.FC<CreateContactProps> = ({\r\n  isAddContact,\r\n  handleAddContactClose,\r\n  selectContact,\r\n  onUpdateContact,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [userImage, setUserImage] = useState<string>(\r\n    selectContact && selectContact.image\r\n      ? selectContact.image\r\n      : '/assets/images/placeholder.jpg',\r\n  );\r\n\r\n  const classes = useStyles();\r\n  const {messages} = useIntl();\r\n  const validationSchema = yup.object({\r\n    name: yup.string().required(messages['validation.nameRequired'] as string),\r\n    email: yup\r\n      .string()\r\n      .email(messages['validation.emailFormat'] as string)\r\n      .required(messages['validation.emailRequired'] as string),\r\n    contact: yup\r\n      .string()\r\n      .required(messages['validation.phoneNumberRequired'] as string),\r\n  });\r\n\r\n  return (\r\n    <Dialog\r\n      open={isAddContact}\r\n      onClose={() => handleAddContactClose()}\r\n      aria-labelledby='simple-modal-title'\r\n      TransitionComponent={Transition}\r\n      aria-describedby='simple-modal-description'\r\n      className={classes.dialogBox}>\r\n      <Scrollbar>\r\n        <Formik\r\n          validateOnChange={true}\r\n          initialValues={{\r\n            name: selectContact ? selectContact.name : '',\r\n            email: selectContact ? selectContact.email : '',\r\n            contact: selectContact ? selectContact.contact : '',\r\n            birthday:\r\n              selectContact && selectContact.birthday\r\n                ? selectContact.birthday\r\n                : null,\r\n            address:\r\n              selectContact && selectContact.address\r\n                ? selectContact.address\r\n                : '',\r\n            appleId:\r\n              selectContact && selectContact.appleId\r\n                ? selectContact.appleId\r\n                : '',\r\n            kakaoId:\r\n              selectContact && selectContact.kakaoId\r\n                ? selectContact.kakaoId\r\n                : '',\r\n            notes:\r\n              selectContact && selectContact.notes ? selectContact.notes : '',\r\n          }}\r\n          validationSchema={validationSchema}\r\n          onSubmit={(data, {setSubmitting, resetForm}) => {\r\n            setSubmitting(true);\r\n            if (selectContact) {\r\n              const newContact = {\r\n                id: selectContact.id,\r\n                isStarred: selectContact.isStarred,\r\n                image: userImage,\r\n                ...data,\r\n              };\r\n              dispatch(onUpdateSelectedContact(newContact as UserListObj));\r\n              onUpdateContact!(newContact as UserListObj);\r\n            } else {\r\n              const newContact = {\r\n                id: Math.floor(Math.random() * 1000),\r\n                isStarred: false,\r\n                isFrequent: Math.random() > 0.5,\r\n                image: userImage,\r\n                ...data,\r\n              };\r\n              dispatch(onCreateContact(newContact as UserListObj));\r\n            }\r\n            handleAddContactClose();\r\n            resetForm();\r\n            setSubmitting(false);\r\n          }}>\r\n          {({values, setFieldValue}) => (\r\n            <AddContactForm\r\n              setUserImage={setUserImage}\r\n              userImage={userImage}\r\n              values={values as UserListObj}\r\n              setFieldValue={setFieldValue}\r\n              handleAddContactClose={handleAddContactClose}\r\n            />\r\n          )}\r\n        </Formik>\r\n      </Scrollbar>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default CreateContact;\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport IntlMessages from '../../../../@crema/utility/IntlMessages';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {UserListObj} from '../../../../types/models/apps/UserList';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  pointer: {\r\n    cursor: 'pointer',\r\n  },\r\n}));\r\n\r\ninterface ItemMenuProps {\r\n  onSelectContactsForDelete: (ids: number[]) => void;\r\n  contact: UserListObj;\r\n  onChangeStarred: (isStarred: boolean, contact: UserListObj) => void;\r\n  onOpenEditContact: (contact: UserListObj) => void;\r\n}\r\n\r\nconst ItemMenu: React.FC<ItemMenuProps> = ({\r\n  onSelectContactsForDelete,\r\n  contact,\r\n  onChangeStarred,\r\n  onOpenEditContact,\r\n}) => {\r\n  const [isMoreIcon, onOpenMoreIcon] = React.useState<null | HTMLElement>(null);\r\n\r\n  const onViewMoreOpen = (event: any) => {\r\n    onOpenMoreIcon(event.currentTarget);\r\n  };\r\n\r\n  const onViewMoreClose = () => {\r\n    onOpenMoreIcon(null);\r\n  };\r\n\r\n  const onDeleteContact = () => {\r\n    onSelectContactsForDelete([contact.id]);\r\n    onViewMoreClose();\r\n  };\r\n\r\n  const onChangeStarredStatus = () => {\r\n    onChangeStarred(!contact.isStarred, contact);\r\n    onViewMoreClose();\r\n  };\r\n\r\n  const onClickEditOption = () => {\r\n    onOpenEditContact(contact);\r\n    onViewMoreClose();\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <Tooltip title={<IntlMessages id='common.more' />}>\r\n        <MoreVertIcon className={classes.pointer} onClick={onViewMoreOpen} />\r\n      </Tooltip>\r\n      <Menu\r\n        anchorEl={isMoreIcon}\r\n        open={Boolean(isMoreIcon)}\r\n        onClose={onViewMoreClose}>\r\n        <MenuItem onClick={onChangeStarredStatus}>\r\n          {contact.isStarred ? (\r\n            <IntlMessages id='common.unstarred' />\r\n          ) : (\r\n            <IntlMessages id='common.starred' />\r\n          )}\r\n        </MenuItem>\r\n\r\n        <MenuItem onClick={onClickEditOption}>\r\n          <IntlMessages id='common.edit' />\r\n        </MenuItem>\r\n        <MenuItem onClick={onDeleteContact}>\r\n          <IntlMessages id='common.delete' />\r\n        </MenuItem>\r\n      </Menu>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ItemMenu;\r\n","import React from 'react';\r\nimport {Card, makeStyles} from '@material-ui/core';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport PhoneIcon from '@material-ui/icons/Phone';\r\nimport BusinessIcon from '@material-ui/icons/Business';\r\nimport IntlMessages from '../../../../@crema/utility/IntlMessages';\r\nimport Box from '@material-ui/core/Box';\r\nimport ItemMenu from './ItemMenu';\r\nimport {blue, grey} from '@material-ui/core/colors';\r\nimport {Fonts} from '../../../../shared/constants/AppEnums';\r\nimport clsx from 'clsx';\r\nimport {CremaTheme} from '../../../../types/AppContextPropsType';\r\nimport {UserListObj} from '../../../../types/models/apps/UserList';\r\n\r\nconst useStyles = makeStyles((theme: CremaTheme) => ({\r\n  gridCard: {\r\n    borderRadius: theme.overrides.MuiCard.root.borderRadius,\r\n    boxShadow: '0 0 5px 1px rgba(0, 0, 0, 0.1)',\r\n    position: 'relative',\r\n    padding: 16,\r\n    [theme.breakpoints.up('xl')]: {\r\n      padding: 20,\r\n    },\r\n  },\r\n  checkboxRoot: {\r\n    marginTop: -8,\r\n    marginLeft: -8,\r\n  },\r\n  avatar: {\r\n    width: 50,\r\n    height: 50,\r\n    backgroundColor: blue[500],\r\n  },\r\n  truncate: {\r\n    overflow: 'hidden',\r\n    textOverflow: 'ellipsis',\r\n    whiteSpace: 'nowrap',\r\n  },\r\n  textBase: {\r\n    fontSize: 16,\r\n  },\r\n}));\r\n\r\ninterface ContactGridItemProps {\r\n  contact: UserListObj;\r\n  onChangeStarred: (isStarred: boolean, contact: UserListObj) => void;\r\n  onChangeCheckedContacts: (event: any, id: number) => void;\r\n  checkedContacts: number[];\r\n  onSelectContactsForDelete: (contactIds: number[]) => void;\r\n  onOpenEditContact: (contact: UserListObj) => void;\r\n  onViewContactDetail: (contact: UserListObj) => void;\r\n\r\n  [x: string]: any;\r\n}\r\n\r\nconst ContactGridItem: React.FC<ContactGridItemProps> = ({\r\n  contact,\r\n  onChangeCheckedContacts,\r\n  checkedContacts,\r\n  onChangeStarred,\r\n  onSelectContactsForDelete,\r\n  onOpenEditContact,\r\n  onViewContactDetail,\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card\r\n      className={clsx(classes.gridCard, 'card-hover')}\r\n      onClick={() => onViewContactDetail(contact)}>\r\n      <Box mb={2} display='flex' justifyContent='space-between'>\r\n        <Box component='span' onClick={(event) => event.stopPropagation()}>\r\n          <Checkbox\r\n            checked={checkedContacts.includes(contact.id)}\r\n            onChange={(event) => onChangeCheckedContacts(event, contact.id)}\r\n            color='primary'\r\n            className={classes.checkboxRoot}\r\n          />\r\n        </Box>\r\n\r\n        {contact.image ? (\r\n          <Avatar className={classes.avatar} src={contact.image} />\r\n        ) : (\r\n          <Avatar className={classes.avatar}>\r\n            {contact.name[0].toUpperCase()}\r\n          </Avatar>\r\n        )}\r\n\r\n        <Box component='span' onClick={(event) => event.stopPropagation()}>\r\n          <ItemMenu\r\n            onSelectContactsForDelete={onSelectContactsForDelete}\r\n            contact={contact}\r\n            onChangeStarred={onChangeStarred}\r\n            onOpenEditContact={onOpenEditContact}\r\n          />\r\n        </Box>\r\n      </Box>\r\n\r\n      <Box mb={{xs: 3, lg: 4, xl: 5}} textAlign='center'>\r\n        <Box fontWeight={Fonts.MEDIUM} fontSize={14}>\r\n          {contact.name}\r\n        </Box>\r\n        <Box fontSize={14} className={classes.truncate}>\r\n          {contact.email ? contact.email : null}\r\n        </Box>\r\n      </Box>\r\n\r\n      <Box\r\n        py={3}\r\n        display='flex'\r\n        flexDirection={{xs: 'column', xl: 'row'}}\r\n        justifyContent={{xl: 'space-around'}}\r\n        fontSize={14}\r\n        borderTop={`2px solid ${grey[200]}`}>\r\n        <Box\r\n          px={3}\r\n          py={2}\r\n          width={{xl: 1 / 2}}\r\n          display='flex'\r\n          justifyContent='center'\r\n          alignItems='center'\r\n          borderTop={{xs: `1px solid ${grey[200]}`, xl: '0 none'}}\r\n          borderLeft={{xl: `1px solid ${grey[200]}`}}>\r\n          <PhoneIcon className={classes.textBase} />\r\n          <Box ml={2} className={classes.truncate}>\r\n            {contact.contact}\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ContactGridItem;\r\n","import React from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Box from '@material-ui/core/Box';\r\nimport clsx from 'clsx';\r\nimport ItemMenu from './ItemMenu';\r\nimport AppsStarredIcon from '../../../../@crema/core/AppsStarredIcon';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {blue, grey} from '@material-ui/core/colors';\r\nimport {Fonts} from '../../../../shared/constants/AppEnums';\r\nimport {UserListObj} from '../../../../types/models/apps/UserList';\r\n\r\ninterface ContactListItemProps {\r\n  contact: UserListObj;\r\n  onChangeStarred: (isStarred: boolean, contact: UserListObj) => void;\r\n  onChangeCheckedContacts: (event: any, id: number) => void;\r\n  checkedContacts: number[];\r\n  onSelectContactsForDelete: (contactIds: number[]) => void;\r\n  onOpenEditContact: (contact: UserListObj) => void;\r\n  onViewContactDetail: (contact: UserListObj) => void;\r\n\r\n  [x: string]: any;\r\n}\r\n\r\nconst ContactListItem: React.FC<ContactListItemProps> = ({\r\n  contact,\r\n  onChangeCheckedContacts,\r\n  checkedContacts,\r\n  onChangeStarred,\r\n  onSelectContactsForDelete,\r\n  onViewContactDetail,\r\n  onOpenEditContact,\r\n}) => {\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      alignItems: 'center',\r\n      borderBottom: `1px solid ${grey[300]}`,\r\n      paddingTop: 8,\r\n      paddingBottom: 8,\r\n      paddingLeft: 20,\r\n      paddingRight: 20,\r\n      cursor: 'pointer',\r\n      '&.rootCheck': {\r\n        fontWeight: Fonts.LIGHT,\r\n        backgroundColor: grey[200],\r\n      },\r\n    },\r\n    truncate: {\r\n      overflow: 'hidden',\r\n      textOverflow: 'ellipsis',\r\n      whiteSpace: 'nowrap',\r\n    },\r\n    avatar: {\r\n      backgroundColor: blue[500],\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <ListItem\r\n        dense\r\n        button\r\n        key={contact.id}\r\n        className={clsx(classes.root, 'item-hover', {\r\n          rootCheck: checkedContacts.includes(contact.id),\r\n        })}\r\n        onClick={() => onViewContactDetail(contact)}>\r\n        <Box\r\n          mr={{xs: 2, sm: 4}}\r\n          component='span'\r\n          onClick={(event) => event.stopPropagation()}>\r\n          <Checkbox\r\n            checked={checkedContacts.includes(contact.id)}\r\n            onChange={(event) => onChangeCheckedContacts(event, contact.id)}\r\n            color='primary'\r\n          />\r\n        </Box>\r\n        <Box mr={3} component='span'>\r\n          {contact.image ? (\r\n            <Avatar src={contact.image} />\r\n          ) : (\r\n            <Avatar className={classes.avatar}>\r\n              {contact.name[0].toUpperCase()}\r\n            </Avatar>\r\n          )}\r\n        </Box>\r\n        <Box\r\n          mr={4}\r\n          fontWeight={Fonts.MEDIUM}\r\n          component='span'\r\n          flex={1}\r\n          className={classes.truncate}>\r\n          {contact.name}\r\n        </Box>\r\n\r\n        <Box\r\n          component='span'\r\n          mr={4}\r\n          flex={1}\r\n          display={{xs: 'none', sm: 'block'}}\r\n          className={classes.truncate}>\r\n          <Box component='span' className={classes.truncate}>\r\n            {contact.email ? contact.email : null}\r\n          </Box>\r\n        </Box>\r\n        <Box\r\n          component='span'\r\n          mr={4}\r\n          flex={1}\r\n          display={{xs: 'none', md: 'block'}}>\r\n          <Box component='span' className={classes.truncate}>\r\n            {contact.contact}\r\n          </Box>\r\n        </Box>\r\n\r\n        <Box\r\n          component='span'\r\n          ml='auto'\r\n          mr={{xl: 4}}\r\n          display='flex'\r\n          alignItems='center'>\r\n          <Box component='span' onClick={(event) => event.stopPropagation()}>\r\n            <AppsStarredIcon item={contact} onChange={onChangeStarred} />\r\n          </Box>\r\n\r\n          <Box\r\n            component='span'\r\n            ml={2}\r\n            onClick={(event) => event.stopPropagation()}>\r\n            <ItemMenu\r\n              onSelectContactsForDelete={onSelectContactsForDelete}\r\n              contact={contact}\r\n              onChangeStarred={onChangeStarred}\r\n              onOpenEditContact={onOpenEditContact}\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </ListItem>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactListItem;\r\n","import Box from '@material-ui/core/Box';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport React from 'react';\r\nimport AppGrid from '../../../../@crema/core/AppGrid';\r\nimport AppList from '../../../../@crema/core/AppList';\r\nimport ListEmptyResult from '../../../../@crema/core/AppList/ListEmptyResult';\r\nimport ContactListSkeleton from '../../../../@crema/core/Skeleton/ContactListSkeleton';\r\nimport IntlMessages from '../../../../@crema/utility/IntlMessages';\r\nimport {UserListObj} from '../../../../types/models/apps/UserList';\r\nimport ContactGridItem from './ContactGridItem';\r\nimport ContactListItem from './ContactListItem';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    paddingTop: 0,\r\n    paddingBottom: 0,\r\n    flex: 1,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n}));\r\n\r\ninterface ContactViewContentProps {\r\n  list: UserListObj[];\r\n  pageView: string;\r\n  loading: boolean;\r\n  handleAddContactOpen: () => void;\r\n  onChangeStarred: (isStarred: boolean, contact: UserListObj) => void;\r\n  onChangeCheckedContacts: (event: any, id: number) => void;\r\n  checkedContacts: number[];\r\n  onSelectContactsForDelete: (contactIds: number[]) => void;\r\n  onOpenEditContact: (contact: UserListObj) => void;\r\n  onViewContactDetail: (contact: UserListObj) => void;\r\n}\r\n\r\nconst ContactViewContent: React.FC<ContactViewContentProps> = ({\r\n  list,\r\n  pageView,\r\n  loading,\r\n  handleAddContactOpen,\r\n  onChangeStarred,\r\n  onChangeCheckedContacts,\r\n  checkedContacts,\r\n  onSelectContactsForDelete,\r\n  onOpenEditContact,\r\n  onViewContactDetail,\r\n}) => {\r\n  const classes = useStyles();\r\n  // console.log('======================ContactViewContent.tsx');\r\n  // console.log(list);\r\n  // console.log('====================================');\r\n  return (\r\n    <>\r\n      {/* list 아니면 grid지 뭐.. */}\r\n      {pageView === 'list' ? (\r\n        <AppList\r\n          data={list}\r\n          animation='transition.slideUpIn'\r\n          className={classes.root}\r\n          ListEmptyComponent={\r\n            <ListEmptyResult\r\n              loading={loading}\r\n              actionTitle={<IntlMessages id='contactApp.createContact' />}\r\n              onClick={handleAddContactOpen}\r\n              placeholder={<ContactListSkeleton />}\r\n            />\r\n          }\r\n\r\n          renderRow={(contact) => (\r\n            <ContactListItem\r\n              key={contact.id}\r\n              contact={contact}\r\n              onChangeCheckedContacts={onChangeCheckedContacts}\r\n              checkedContacts={checkedContacts}\r\n              onSelectContactsForDelete={onSelectContactsForDelete}\r\n              onChangeStarred={onChangeStarred}\r\n              onViewContactDetail={onViewContactDetail}\r\n              onOpenEditContact={onOpenEditContact}\r\n            />\r\n          )}\r\n        />\r\n      ) : (\r\n        <Box p={6}>\r\n          <AppGrid\r\n            responsive={{\r\n              xs: 1,\r\n              sm: 2,\r\n              md: 3,\r\n              lg: 3,\r\n              xl: 3,\r\n            }}\r\n            data={list}\r\n            renderRow={(contact) => {\r\n              return (\r\n                <ContactGridItem\r\n                  key={contact.id}\r\n                  contact={contact}\r\n                  onChangeCheckedContacts={onChangeCheckedContacts}\r\n                  checkedContacts={checkedContacts}\r\n                  onChangeStarred={onChangeStarred}\r\n                  onSelectContactsForDelete={onSelectContactsForDelete}\r\n                  onViewContactDetail={onViewContactDetail}\r\n                  onOpenEditContact={onOpenEditContact}\r\n                />\r\n              );\r\n            }}\r\n          />\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default ContactViewContent;\r\n","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AppsStarredIcon from '../../../@crema/core/AppsStarredIcon';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {UserListObj} from '../../../types/models/apps/UserList';\r\n\r\ninterface ContactActionsProps {\r\n  contact: UserListObj;\r\n  onDeleteContact: () => void;\r\n  onChangeStarred: (checked: boolean, item: any) => void;\r\n  onOpenEditContact: (contact: UserListObj) => void;\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  pointer: {\r\n    cursor: 'pointer',\r\n  },\r\n}));\r\n\r\nconst ContactActions: React.FC<ContactActionsProps> = ({\r\n  onDeleteContact,\r\n  onChangeStarred,\r\n  onOpenEditContact,\r\n  contact,\r\n}) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Box display='flex' justifyContent='flex-end' alignItems='center'>\r\n      <Box ml={2}>\r\n        <EditIcon\r\n          className={classes.pointer}\r\n          onClick={() => onOpenEditContact(contact)}\r\n        />\r\n      </Box>\r\n      <Box ml={2}>\r\n        <AppsStarredIcon item={contact} onChange={onChangeStarred} />\r\n      </Box>\r\n      <Box ml={2}>\r\n        <DeleteIcon className={classes.pointer} onClick={onDeleteContact} />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ContactActions;\r\n","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport IntlMessages from '../../../@crema/utility/IntlMessages';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport PhoneIcon from '@material-ui/icons/Phone';\r\nimport LanguageIcon from '@material-ui/icons/Language';\r\nimport CakeIcon from '@material-ui/icons/Cake';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {grey} from '@material-ui/core/colors';\r\nimport {Fonts} from '../../../shared/constants/AppEnums';\r\nimport {UserListObj} from '../../../types/models/apps/UserList';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  borderBottomClass: {\r\n    borderBottom: `1px solid ${grey[300]}`,\r\n  },\r\n  iconRoot: {\r\n    fontSize: 16,\r\n    color: 'grey.600',\r\n  },\r\n}));\r\n\r\ninterface PersonalDetailsProps {\r\n  contact: UserListObj;\r\n}\r\n\r\nconst PersonalDetails: React.FC<PersonalDetailsProps> = ({contact}) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Box\r\n      pr={{xs: 5, lg: 8, xl: 10}}\r\n      pb={5}\r\n      className={classes.borderBottomClass}>\r\n      <Box component='h6' mb={2} fontWeight={Fonts.MEDIUM} fontSize={16}>\r\n        <IntlMessages id='contactApp.personalDetails' />\r\n      </Box>\r\n\r\n      <Box px={{xs: 5, lg: 8, xl: 10}}>\r\n        <Box mb={2} display='flex' alignItems='center'>\r\n          {' '}\r\n          <EmailIcon className={classes.iconRoot} />{' '}\r\n          <Box ml={2} fontSize={14} color='text.secondary'>\r\n            {contact.email}\r\n          </Box>\r\n        </Box>\r\n\r\n        <Box mb={2} display='flex' alignItems='center'>\r\n          <PhoneIcon className={classes.iconRoot} />\r\n          <Box ml={2} color='text.secondary' fontSize={14}>\r\n            {contact.contact}\r\n          </Box>\r\n        </Box>\r\n\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PersonalDetails;\r\n","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport IntlMessages from '../../../@crema/utility/IntlMessages';\r\nimport AppleIcon from '@material-ui/icons/Apple';\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {grey} from '@material-ui/core/colors';\r\nimport {Fonts} from '../../../shared/constants/AppEnums';\r\nimport {UserListObj} from '../../../types/models/apps/UserList';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  borderBottomClass: {\r\n    borderBottom: `1px solid ${grey[300]}`,\r\n  },\r\n  iconRoot: {\r\n    fontSize: 16,\r\n    color: 'grey.600',\r\n  },\r\n}));\r\n\r\ninterface SocialMediaProps {\r\n  contact: UserListObj;\r\n}\r\n\r\nconst SocialMedia: React.FC<SocialMediaProps> = ({contact}) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Box\r\n      pr={{xs: 5, lg: 8, xl: 10}}\r\n      py={5}\r\n      className={classes.borderBottomClass}>\r\n      <Box component='h6' mb={2} fontWeight={Fonts.MEDIUM} fontSize={16}>\r\n        <IntlMessages id='common.socialMedia' />\r\n      </Box>\r\n\r\n      <Box px={{xs: 5, lg: 8, xl: 10}}>\r\n        <Box mb={2} display='flex' alignItems='center'>\r\n          <AppleIcon className={classes.iconRoot} />\r\n          <Box ml={2} color='text.secondary' fontSize={14}>\r\n            {contact.appleId ? (\r\n              contact.appleId\r\n            ) : (\r\n              <IntlMessages id='common.na' />\r\n            )}\r\n          </Box>\r\n        </Box>\r\n\r\n        <Box display='flex' alignItems='center'>\r\n          <TwitterIcon className={classes.iconRoot} />\r\n          <Box ml={2} color='text.secondary' fontSize={14}>\r\n            {contact.kakaoId ? (\r\n              contact.kakaoId\r\n            ) : (\r\n              <IntlMessages id='common.na' />\r\n            )}\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default SocialMedia;\r\n","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport IntlMessages from '../../../@crema/utility/IntlMessages';\r\nimport {useIntl} from 'react-intl';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {Fonts} from '../../../shared/constants/AppEnums';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {UserListObj} from '../../../types/models/apps/UserList';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  textareaAutosizeRoot: {\r\n    width: '100%',\r\n  },\r\n}));\r\n\r\ninterface NotesProps {\r\n  contact: UserListObj;\r\n}\r\n\r\nconst Notes: React.FC<NotesProps> = ({contact}) => {\r\n  const {messages} = useIntl();\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box pr={{xs: 5, lg: 8, xl: 10}} py={5}>\r\n      <Box component='h6' m={2} fontWeight={Fonts.MEDIUM} fontSize={16}>\r\n        <IntlMessages id='common.notes' />\r\n      </Box>\r\n\r\n      <TextField\r\n        multiline\r\n        className={classes.textareaAutosizeRoot}\r\n        rows='4'\r\n        placeholder={messages['common.notes'] as string}\r\n        name='notes'\r\n        value={contact.notes}\r\n        variant='outlined'\r\n        disabled\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Notes;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {onUpdateSelectedContact} from '../../../redux/actions/UserList';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport {Scrollbar} from '../../../@crema';\r\nimport Box from '@material-ui/core/Box';\r\nimport ContactActions from './ContactActions';\r\nimport PersonalDetails from './PersonalDetails';\r\nimport OtherDetails from './OtherDetails';\r\nimport SocialMedia from './SocialMedia';\r\nimport Notes from './Notes';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {grey} from '@material-ui/core/colors';\r\nimport {Fonts} from '../../../shared/constants/AppEnums';\r\nimport {UserListObj} from '../../../types/models/apps/UserList';\r\nimport {TransitionProps} from '@material-ui/core/transitions';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  dialogBox: {\r\n    position: 'relative',\r\n    '& .MuiDialog-paperWidthSm': {\r\n      maxWidth: 600,\r\n      width: '100%',\r\n    },\r\n    '& .MuiTypography-h6': {\r\n      fontWeight: Fonts.LIGHT,\r\n    },\r\n  },\r\n  pointer: {\r\n    cursor: 'pointer',\r\n  },\r\n  avatar: {\r\n    width: 140,\r\n    height: 140,\r\n    marginBottom: 8,\r\n  },\r\n  borderBottomClass: {\r\n    borderBottom: `1px solid ${grey[300]}`,\r\n  },\r\n}));\r\nconst Transition = React.forwardRef(function Transition(\r\n  props: TransitionProps & {children?: React.ReactElement<any, any>},\r\n  ref: React.Ref<unknown>,\r\n) {\r\n  return <Slide direction='up' ref={ref} {...props} />;\r\n});\r\n\r\ninterface ContactDetailProps {\r\n  isShowDetail: boolean;\r\n  selectedContact: UserListObj | null;\r\n  onShowDetail: (show: boolean) => void;\r\n  onSelectContactsForDelete: (ids: number[]) => void;\r\n  onOpenEditContact: (contact: UserListObj) => void;\r\n}\r\n\r\nconst ContactDetail: React.FC<ContactDetailProps> = ({\r\n  isShowDetail,\r\n  selectedContact,\r\n  onShowDetail,\r\n  onSelectContactsForDelete,\r\n  onOpenEditContact,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [contact, setContact] = useState<UserListObj | null>(selectedContact);\r\n\r\n  useEffect(() => {\r\n    setContact(selectedContact);\r\n  }, [selectedContact]);\r\n\r\n  const onChangeStarred = (checked: boolean) => {\r\n    const updatedContact = contact;\r\n    contact!.isStarred = checked;\r\n    setContact(updatedContact);\r\n    dispatch(onUpdateSelectedContact(contact!));\r\n  };\r\n\r\n  const onDeleteContact = () => {\r\n    onSelectContactsForDelete([contact!.id]);\r\n    onShowDetail(false);\r\n  };\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <Dialog\r\n        open={isShowDetail}\r\n        onClose={() => onShowDetail(false)}\r\n        TransitionComponent={Transition}\r\n        aria-labelledby='simple-modal-title'\r\n        aria-describedby='simple-modal-description'\r\n        className={classes.dialogBox}>\r\n        <Scrollbar>\r\n          <Box p={5} className={classes.borderBottomClass}>\r\n            <ContactActions\r\n              onChangeStarred={onChangeStarred}\r\n              onDeleteContact={onDeleteContact}\r\n              // 수정 모달 열기\r\n              onOpenEditContact={onOpenEditContact}\r\n              contact={contact!}\r\n            />\r\n            <Box\r\n              mt={{sm: -3}}\r\n              display='flex'\r\n              flexDirection='column'\r\n              alignItems='center'>\r\n              {contact!.image ? (\r\n                <Avatar className={classes.avatar} src={contact!.image} />\r\n              ) : (\r\n                <Avatar className={classes.avatar}>\r\n                  {contact!.name[0].toUpperCase()}\r\n                </Avatar>\r\n              )}\r\n              <Box component='h4' fontWeight={Fonts.MEDIUM}>\r\n                {contact!.name}\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n\r\n          <Box py={5} pl={{xs: 8, lg: 8, lx: 10}}>\r\n            <Scrollbar style={{maxHeight: 400}}>\r\n              {contact ? <PersonalDetails contact={contact} /> : null}\r\n              {/* {contact ? <OtherDetails contact={contact} /> : null} */}\r\n              {contact ? <SocialMedia contact={contact} /> : null}\r\n              {contact ? <Notes contact={contact} /> : null}\r\n            </Scrollbar>\r\n          </Box>\r\n        </Scrollbar>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactDetail;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {useLocation} from 'react-router-dom';\r\nimport {\r\n  onDeleteContacts,\r\n  onGetContactList,\r\n  onUpdateStarredStatus,\r\n} from '../../../redux/actions/UserList';\r\nimport ContactHeader from './ContactHeader';\r\nimport ConfirmationDialog from '../../../@crema/core/ConfirmationDialog';\r\nimport IntlMessages from '../../../@crema/utility/IntlMessages';\r\nimport CreateContact from '../CreateContact';\r\nimport {Hidden} from '@material-ui/core';\r\nimport ContactViewContent from './ContactViewContent';\r\nimport ContactDetail from '../ContactDetail';\r\nimport AppsPagination from '../../../@crema/core/AppsPagination';\r\nimport AppsHeader from '../../../@crema/core/AppsContainer/AppsHeader';\r\nimport AppsContent from '../../../@crema/core/AppsContainer/AppsContent';\r\nimport AppsFooter from '../../../@crema/core/AppsContainer/AppsFooter';\r\nimport {AppState} from '../../../redux/store';\r\nimport {UserListObj} from '../../../types/models/apps/UserList';\r\n\r\nconst ContactListing = () => {\r\n  const dispatch = useDispatch();\r\n  const {pathname} = useLocation();\r\n\r\n  const {\r\n    contactList,\r\n    totalContacts,\r\n  }: {contactList: UserListObj[]; totalContacts: number} = useSelector<\r\n    AppState,\r\n    AppState['userList']\r\n  >(({userList}) => userList);\r\n\r\n  const [filterText, onSetFilterText] = useState('');\r\n  const [page, setPage] = useState(0);\r\n  const [pageView, setPageView] = useState<string>('list');\r\n  const [isDeleteDialogOpen, setDeleteDialogOpen] = useState<boolean>(false);\r\n  const [checkedContacts, setCheckedContacts] = useState<number[]>([]);\r\n  const [toDeleteContacts, setToDeleteContacts] = useState<number[]>([]);\r\n  const [isAddContact, onSetIsAddContact] = useState<boolean>(false);\r\n  const [isShowDetail, onShowDetail] = useState<boolean>(false);\r\n  const [selectedContact, setSelectedContact] = useState<UserListObj | null>(\r\n    null,\r\n  );\r\n\r\n  const {loading} = useSelector<AppState, AppState['common']>(\r\n    ({common}) => common,\r\n  );\r\n\r\n  useEffect(() => {\r\n    setPage(0);\r\n  }, [pathname]);\r\n\r\n  useEffect(() => {\r\n    const path = pathname.split('/');\r\n    // path가 apps/contact/folder/starred 이렇게 나오니까 .split('/') 하면 string[4]\r\n    //param(path[4-2]는 folder, path[4-1]은 list|all.., 마지막은 page)\r\n    dispatch(\r\n      onGetContactList(path[path.length - 2], path[path.length - 1], page),\r\n    );\r\n  }, [pathname, pageView, page, dispatch]);\r\n\r\n  const handleAddContactOpen = () => {\r\n    onSetIsAddContact(true);\r\n  };\r\n\r\n  const handleAddContactClose = () => {\r\n    onSetIsAddContact(false);\r\n  };\r\n\r\n  const onViewContactDetail = (contact: UserListObj) => {\r\n    setSelectedContact(contact);\r\n    onShowDetail(true);\r\n  };\r\n\r\n  const onOpenEditContact = (contact: UserListObj) => {\r\n    setSelectedContact(contact);\r\n    handleAddContactOpen();\r\n  };\r\n\r\n  const onPageChange = (\r\n    event: React.MouseEvent<HTMLButtonElement> | null,\r\n    value: number,\r\n  ) => {\r\n    setPage(value);\r\n  };\r\n\r\n  const onChangePageView = (view: string) => {\r\n    setPageView(view);\r\n  };\r\n\r\n  const onChangeCheckedContacts = (event: any, id: number) => {\r\n    if (event.target.checked) {\r\n      setCheckedContacts(checkedContacts.concat(id));\r\n    } else {\r\n      setCheckedContacts(\r\n        checkedContacts.filter((contactId) => contactId !== id),\r\n      );\r\n    }\r\n  };\r\n\r\n  const onChangeStarred = (status: boolean, contact: UserListObj) => {\r\n    const selectedIdList = [contact.id];\r\n    const path = pathname.split('/');\r\n    dispatch(\r\n      onUpdateStarredStatus(selectedIdList, status, path[path.length - 1]),\r\n    );\r\n  };\r\n\r\n  const onUpdateContact = (contact: UserListObj) => {\r\n    setSelectedContact(contact);\r\n    handleAddContactClose();\r\n  };\r\n\r\n  const onGetFilteredItems = () => {\r\n    if (filterText === '') {\r\n      return contactList;\r\n    } else {\r\n      return contactList.filter((contact: UserListObj) =>\r\n        contact.name.toUpperCase().includes(filterText.toUpperCase()),\r\n      );\r\n    }\r\n  };\r\n\r\n  const onDeleteSelectedContacts = () => {\r\n    const path = pathname.split('/');\r\n    dispatch(\r\n      onDeleteContacts(\r\n        path[path.length - 2],\r\n        path[path.length - 1],\r\n        toDeleteContacts,\r\n        page,\r\n      ),\r\n    );\r\n    setDeleteDialogOpen(false);\r\n    setCheckedContacts([]);\r\n  };\r\n\r\n  const onSelectContactsForDelete = (contactIds: number[]) => {\r\n    setToDeleteContacts(contactIds);\r\n    setDeleteDialogOpen(true);\r\n  };\r\n\r\n  const list = onGetFilteredItems();\r\n\r\n  return (\r\n    <>\r\n      <AppsHeader>\r\n        <ContactHeader\r\n          checkedContacts={checkedContacts}\r\n          setCheckedContacts={setCheckedContacts}\r\n          filterText={filterText}\r\n          onSelectContactsForDelete={onSelectContactsForDelete}\r\n          onSetFilterText={onSetFilterText}\r\n          onPageChange={onPageChange}\r\n          page={page}\r\n          onChangePageView={onChangePageView}\r\n          pageView={pageView}\r\n        />\r\n      </AppsHeader>\r\n      <AppsContent>\r\n        <ContactViewContent\r\n          list={list}\r\n          loading={loading}\r\n          pageView={pageView}\r\n          handleAddContactOpen={handleAddContactOpen}\r\n          onChangeCheckedContacts={onChangeCheckedContacts}\r\n          onChangeStarred={onChangeStarred}\r\n          checkedContacts={checkedContacts}\r\n          onSelectContactsForDelete={onSelectContactsForDelete}\r\n          onViewContactDetail={onViewContactDetail}\r\n          onOpenEditContact={onOpenEditContact}\r\n        />\r\n      </AppsContent>\r\n\r\n      <Hidden smUp>\r\n        {contactList.length > 0 ? (\r\n          <AppsFooter>\r\n            <AppsPagination\r\n              count={totalContacts}\r\n              page={page}\r\n              onPageChange={onPageChange}\r\n            />\r\n          </AppsFooter>\r\n        ) : null}\r\n      </Hidden>\r\n\r\n      {isAddContact ? (\r\n        <CreateContact\r\n          isAddContact={isAddContact}\r\n          handleAddContactClose={handleAddContactClose}\r\n          selectContact={selectedContact}\r\n          onUpdateContact={onUpdateContact}\r\n        />\r\n      ) : null}\r\n\r\n      {isShowDetail ? (\r\n        <ContactDetail\r\n          selectedContact={selectedContact}\r\n          isShowDetail={isShowDetail}\r\n          onShowDetail={onShowDetail}\r\n          onSelectContactsForDelete={onSelectContactsForDelete}\r\n          onOpenEditContact={onOpenEditContact}\r\n        />\r\n      ) : null}\r\n\r\n      {isDeleteDialogOpen ? (\r\n        <ConfirmationDialog\r\n          open={isDeleteDialogOpen}\r\n          onDeny={setDeleteDialogOpen}\r\n          onConfirm={onDeleteSelectedContacts}\r\n          title={<IntlMessages id='userList.deleteContact' />}\r\n          dialogTitle={<IntlMessages id='common.deleteItem' />}\r\n        />\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactListing;\r\n","import Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport React, {useState} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport IntlMessages from '../../../@crema/utility/IntlMessages';\r\nimport Scrollbar from '../../../@crema/core/Scrollbar';\r\nimport CreateContact from '../CreateContact';\r\nimport AppsSideBarFolderItem from '../../../@crema/core/AppsSideBarFolderItem';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {Fonts} from '../../../shared/constants/AppEnums';\r\nimport AppList from '../../../@crema/core/AppList';\r\nimport AppAnimate from '../../../@crema/core/AppAnimate';\r\nimport ListEmptyResult from '../../../@crema/core/AppList/ListEmptyResult';\r\nimport SidebarPlaceholder from '../../../@crema/core/Skeleton/SidebarListSkeleton';\r\nimport {CremaTheme} from '../../../types/AppContextPropsType';\r\nimport {AppState} from '../../../redux/store';\r\n\r\nconst useStyles = makeStyles((theme: CremaTheme) => ({\r\n  btnRoot: {\r\n    width: '100%',\r\n    fontSize: 16,\r\n    textTransform: 'capitalize',\r\n    fontWeight: Fonts.MEDIUM,\r\n  },\r\n  listRoot: {\r\n    marginBottom: 8,\r\n    [theme.breakpoints.up('xl')]: {\r\n      marginBottom: 20,\r\n    },\r\n  },\r\n}));\r\n\r\nconst SideBarContent: React.FC<{}> = () => {\r\n  const {folderList} = useSelector<AppState, AppState['userList']>(\r\n    ({userList}) => userList,\r\n  );\r\n\r\n  const [isAddContact, onSetIsAddContact] = useState(false);\r\n\r\n  const handleAddContactOpen = () => {\r\n    onSetIsAddContact(true);\r\n  };\r\n\r\n  const handleAddContactClose = () => {\r\n    onSetIsAddContact(false);\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      {/*회원 추가*/}\r\n      <Box px={{xs: 4, md: 5}} pt={{xs: 4, md: 5}} pb={{xs: 2, xl: 5}}>\r\n        <AppAnimate>\r\n          <Button\r\n            variant='contained'\r\n            color='secondary'\r\n            className={classes.btnRoot}\r\n            onClick={handleAddContactOpen}>\r\n            <IntlMessages id='contactApp.createContact' />\r\n          </Button>\r\n        </AppAnimate>\r\n      </Box>\r\n\r\n      <Scrollbar className='scroll-app-sidebar'>\r\n        <Box\r\n          px={{xs: 4, md: 5, lg: 6, xl: 8}}\r\n          pb={{xs: 4, md: 5, lg: 6, xl: 8}}\r\n          pt={0}>\r\n          <List\r\n            className={classes.listRoot}\r\n            component='nav'\r\n            aria-label='main task folders'>\r\n            <AppList\r\n              animation='transition.slideLeftIn'\r\n              data={folderList}\r\n              ListEmptyComponent={\r\n                <ListEmptyResult\r\n                  loading={true}\r\n                  placeholder={<SidebarPlaceholder />}\r\n                />\r\n              }\r\n              renderRow={(item) => (\r\n                <AppsSideBarFolderItem\r\n                  key={item.id}\r\n                  item={item}\r\n                  path={`/user/userList/folder/${item.alias}`}\r\n                />\r\n              )}\r\n            />\r\n          </List>\r\n          {isAddContact ? (\r\n            <CreateContact\r\n              isAddContact={isAddContact}\r\n              handleAddContactClose={handleAddContactClose}\r\n            />\r\n          ) : null}\r\n        </Box>\r\n      </Scrollbar>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SideBarContent;\r\n","import React, {useEffect} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {onGetFolderList} from '../../redux/actions/UserList';\nimport ContactListing from './ContactListing';\nimport {useIntl} from 'react-intl';\nimport AppsContainer from '../../@crema/core/AppsContainer';\nimport SideBarContent from './ContactSideBar';\n\nconst Contact = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(onGetFolderList());\n  }, [dispatch]);\n\n  const {messages} = useIntl();\n  return (\n    <AppsContainer\n      title={messages['contactApp.contact'] as string}\n      sidebarContent={<SideBarContent />}>\n      <ContactListing />\n    </AppsContainer>\n  );\n};\n\nexport default Contact;\n"],"sourceRoot":""}