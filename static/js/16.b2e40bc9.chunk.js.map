{"version":3,"sources":["redux/actions/ProductList.ts","modules/product/ProductListing/ContactHeader/CheckBox.tsx","modules/product/ProductListing/ContactHeader/ContactCheckedActions.tsx","modules/product/ProductListing/ContactHeader/ViewSelectButtons.tsx","modules/product/ProductListing/ContactHeader/index.tsx","modules/product/ProductContact/AddContactForm.tsx","modules/product/ProductContact/index.tsx","modules/product/ProductListing/ContactViewContent/ItemMenu.tsx","modules/product/ProductListing/ContactViewContent/ContactGridItem.tsx","modules/product/ProductListing/ContactViewContent/LableBox.tsx","modules/product/ProductListing/ContactViewContent/ContactListItem.tsx","modules/product/ProductListing/ContactViewContent/index.tsx","modules/product/ProductDetail/ContactActions.tsx","modules/product/ProductDetail/Notes.tsx","modules/product/ProductDetail/PersonalDetails.tsx","modules/product/ProductDetail/index.tsx","modules/product/ProductListing/index.tsx","modules/product/ProductSideBar/index.tsx","modules/product/ProductList.tsx"],"names":["onUpdateSelectedProduct","contact","messages","appIntl","dispatch","type","FETCH_START","Api","put","then","data","status","FETCH_SUCCESS","UPDATE_PRODUCT_DETAIL","payload","SHOW_MESSAGE","FETCH_ERROR","catch","error","message","CheckBox","checkedContacts","setCheckedContacts","contactList","useSelector","productList","Box","mr","xs","xl","Checkbox","color","indeterminate","length","checked","onChange","event","target","contactIds","map","id","useStyles","makeStyles","pointer","cursor","display","ContactCheckedActions","onSelectContactsForDelete","React","useState","onOpenLabel","classes","component","alignItems","Tooltip","title","IntlMessages","className","onClick","currentTarget","theme","root","palette","primary","main","ViewSelectButtons","pageView","onChangePageView","ml","IconButton","clsx","active","appsPaginationRoot","paddingLeft","paddingRight","ContactHeader","filterText","onSetFilterText","page","onPageChange","totalContacts","useIntl","flex","flexDirection","SearchBar","overlap","value","placeholder","Hidden","xsDown","AppsPagination","count","avatar","width","height","marginBottom","myTextField","breakpoints","up","btnRoot","fieldRoot","padding","backgroundColor","background","paper","text","widthFull","MyTextField","props","useField","field","meta","errorText","touched","TextField","helperText","AddContactForm","values","handleAddContactClose","setUserImage","setFieldValue","useDropzone","accept","onDrop","acceptedFiles","getRootProps","getInputProps","noValidate","autoComplete","p","borderBottom","grey","htmlFor","fontWeight","Fonts","MEDIUM","productName","Scrollbar","style","maxHeight","py","px","lg","pb","mb","fontSize","md","required","variant","label","name","multiline","rows","bgcolor","Button","dialogBox","position","maxWidth","LIGHT","Transition","forwardRef","ref","Slide","direction","CreateContact","isAddContact","selectContact","onUpdateContact","useDispatch","validationSchema","yup","email","Dialog","open","onClose","aria-labelledby","TransitionComponent","aria-describedby","validateOnChange","initialValues","link","productPrice","totalPplCnt","startPeriod","endPeriod","deliveryMethod","detailContent","img","onSubmit","setSubmitting","resetForm","newContact","isStarred","String","Math","floor","random","post","CREATE_NEW_PRODUCT","onCreateProduct","ItemMenu","product","onChangeStarred","onOpenEditContact","isMoreIcon","onOpenMoreIcon","onViewMoreClose","Menu","anchorEl","Boolean","MenuItem","gridCard","borderRadius","overrides","MuiCard","boxShadow","checkboxRoot","marginTop","marginLeft","blue","truncate","overflow","textOverflow","whiteSpace","textBase","ContactGridItem","onChangeCheckedContacts","onViewContactDetail","Card","justifyContent","stopPropagation","includes","textAlign","borderTop","borderLeft","LabelBox","ContactListItem","paddingTop","paddingBottom","console","log","url","cateLabel","category","lime","deepOrange","pink","red","lightBlue","green","deliverLabel","ListItem","dense","button","rootCheck","sm","mx","activated","Avatar","src","joinPplCnt","AppsStarredIcon","item","ContactViewContent","list","loading","handleAddContactOpen","AppList","animation","ListEmptyComponent","ListEmptyResult","actionTitle","ContactListSkeleton","renderRow","AppGrid","responsive","ContactActions","onDeleteContact","textareaAutosizeRoot","Notes","pr","m","disabled","borderBottomClass","iconRoot","PersonalDetails","ContactDetail","isShowDetail","selectedContact","onShowDetail","setContact","useEffect","updatedContact","mt","pl","lx","ContactListing","pathname","useLocation","setPage","setPageView","isDeleteDialogOpen","setDeleteDialogOpen","toDeleteContacts","setToDeleteContacts","onSetIsAddContact","setSelectedContact","common","path","split","currentPage","get","params","GET_PRODUCT_LIST","onGetProductList","filter","toUpperCase","AppsHeader","view","AppsContent","concat","contactId","selectedIdList","folderName","UPDATE_PRODUCT_STARRED_STATUS","onUpdateStarredStatus","smUp","AppsFooter","ProductDetail","ConfirmationDialog","onDeny","onConfirm","DELETE_PRODUCT","onDeleteProducts","dialogTitle","textTransform","listRoot","SideBarContent","folderList","pt","AppAnimate","aria-label","AppsSideBarFolderItem","alias","Product","GET_PRODUCT_FOLDER_LIST","onGetFolderList","AppsContainer","sidebarContent","ProductListing"],"mappings":"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","file":"static/js/16.b2e40bc9.chunk.js","sourcesContent":["import {AppActions} from '../../types/index';\nimport {Dispatch} from 'redux';\nimport {\n  FETCH_ERROR,\n  FETCH_START,\n  FETCH_SUCCESS,\n  SHOW_MESSAGE,\n} from '../../types/actions/Common.action';\nimport {\n  ProductListActionTypes,\n  CREATE_NEW_PRODUCT,\n  DELETE_PRODUCT,\n  GET_PRODUCT_FOLDER_LIST,\n  GET_PRODUCT_LIST,\n  TOGGLE_PRODUCT_DRAWER,\n  UPDATE_PRODUCT_DETAIL,\n  UPDATE_PRODUCT_STARRED_STATUS,\n} from '../../types/actions/ProductList.action';\nimport Api from '../../@crema/services/ApiConfig';\nimport {appIntl} from '../../@crema/utility/Utils';\n\n/* 경로설명: \napi호출은 src/@crema/services/apis ... 로 호출한다\n*/\n\n//onGetContactList ->\nexport const onGetProductList = (\n  type: string,\n  name: string,\n  currentPage: number,\n) => {\n  const {messages} = appIntl();\n  const page = currentPage ? currentPage : 0;\n  return (dispatch: Dispatch<AppActions>) => {\n    dispatch({type: FETCH_START});\n    Api.get('/api/product/List', {\n      params: {\n        type: type,\n        name: name,\n        page: page,\n      },\n    })\n      .then((data) => {\n        if (data.status === 200) {\n          dispatch({type: FETCH_SUCCESS});\n          dispatch({type: GET_PRODUCT_LIST, payload: data.data});\n        } else {\n          dispatch({\n            type: FETCH_ERROR,\n            payload: messages['message.somethingWentWrong'],\n          });\n        }\n      })\n      .catch((error) => {\n        dispatch({type: FETCH_ERROR, payload: error.message});\n      });\n  };\n};\n\nexport const onGetFolderList = () => {\n  const {messages} = appIntl();\n  return (dispatch: Dispatch<AppActions>) => {\n    dispatch({type: FETCH_START});\n    Api.get('/api/product/folders/list')\n      .then((data) => {\n        if (data.status === 200) {\n          dispatch({type: FETCH_SUCCESS});\n          dispatch({type: GET_PRODUCT_FOLDER_LIST, payload: data.data});\n        } else {\n          dispatch({\n            type: FETCH_ERROR,\n            payload: messages['message.somethingWentWrong'],\n          });\n        }\n      })\n      .catch((error) => {\n        dispatch({type: FETCH_ERROR, payload: error.message});\n      });\n  };\n};\n\n//onToggleContactDrawer to->\nexport const onToggleProductDrawer = () => {\n  return (dispatch: Dispatch<AppActions>) => {\n    dispatch({type: TOGGLE_PRODUCT_DRAWER});\n  };\n};\n\nexport const onUpdateStarredStatus = (\n  contactIds: string[],\n  status: boolean,\n  folderName: string,\n) => {\n  const {messages} = appIntl();\n  return (dispatch: Dispatch<AppActions>) => {\n    dispatch({type: FETCH_START});\n    Api.put('/api/product/update/starred', {contactIds, status})\n      .then((data) => {\n        if (data.status === 200) {\n          dispatch({type: FETCH_SUCCESS});\n          dispatch({\n            type: UPDATE_PRODUCT_STARRED_STATUS,\n            payload: {data: data.data, folderName: folderName},\n          });\n          dispatch({\n            type: SHOW_MESSAGE,\n            payload: messages['message.starredStatus'],\n          });\n        } else {\n          dispatch({\n            type: FETCH_ERROR,\n            payload: messages['message.somethingWentWrong'],\n          });\n        }\n      })\n      .catch((error) => {\n        dispatch({type: FETCH_ERROR, payload: error.message});\n      });\n  };\n};\n\nexport const onDeleteProducts = (\n  type: string,\n  name: string,\n  contactIds: string[],\n  page: number,\n) => {\n  const {messages} = appIntl();\n  return (dispatch: Dispatch<AppActions>) => {\n    dispatch({type: FETCH_START});\n    Api.post('/api/product/delete/contact', {type, name, contactIds, page})\n      .then((data) => {\n        if (data.status === 200) {\n          dispatch({type: FETCH_SUCCESS});\n          dispatch({type: DELETE_PRODUCT, payload: data.data});\n          dispatch({\n            type: SHOW_MESSAGE,\n            payload: messages['message.contactDeleted'],\n          });\n        } else {\n          dispatch({\n            type: FETCH_ERROR,\n            payload: messages['message.somethingWentWrong'],\n          });\n        }\n      })\n      .catch((error) => {\n        dispatch({type: FETCH_ERROR, payload: error.message});\n      });\n  };\n};\n\nexport const onUpdateSelectedProduct = (contact: any) => {\n  const {messages} = appIntl();\n  return (dispatch: Dispatch<AppActions>) => {\n    dispatch({type: FETCH_START});\n    Api.put('/api/product/', {contact})\n      .then((data) => {\n        if (data.status === 200) {\n          dispatch({type: FETCH_SUCCESS});\n          dispatch({type: UPDATE_PRODUCT_DETAIL, payload: data.data});\n          dispatch({\n            type: SHOW_MESSAGE,\n            payload: messages['message.contactUpdated'],\n          });\n        } else {\n          dispatch({\n            type: FETCH_ERROR,\n            payload: messages['message.somethingWentWrong'],\n          });\n        }\n      })\n      .catch((error) => {\n        dispatch({type: FETCH_ERROR, payload: error.message});\n      });\n  };\n};\n\nexport const onCreateProduct = (contact: any) => {\n  const {messages} = appIntl();\n  return (dispatch: Dispatch<AppActions>) => {\n    dispatch({type: FETCH_START});\n    Api.post('/api/product/compose', {contact})\n      .then((data) => {\n        if (data.status === 200) {\n          dispatch({type: FETCH_SUCCESS});\n          dispatch({type: CREATE_NEW_PRODUCT, payload: data.data});\n          dispatch({\n            type: SHOW_MESSAGE,\n            payload: messages['message.contactCreated'],\n          });\n        } else {\n          dispatch({\n            type: FETCH_ERROR,\n            payload: messages['message.somethingWentWrong'],\n          });\n        }\n      })\n      .catch((error) => {\n        dispatch({type: FETCH_ERROR, payload: error.message});\n      });\n  };\n};\n","import React from 'react';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Box from '@material-ui/core/Box';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppState} from '../../../../redux/store';\r\nimport {ProductListObj} from '../../../../types/models/apps/ProductList';\r\n\r\ninterface CheckBoxProps {\r\n  checkedContacts: string[];\r\n  setCheckedContacts: (contactIds: string[]) => void;\r\n}\r\n\r\nconst CheckBox: React.FC<CheckBoxProps> = ({\r\n  checkedContacts,\r\n  setCheckedContacts,\r\n}) => {\r\n  const {contactList}: {contactList: ProductListObj[]} = useSelector<\r\n    AppState,\r\n    AppState['productList']\r\n  >(({productList}) => productList);\r\n\r\n  const onHandleMasterCheckbox = (\r\n    event: React.ChangeEvent<HTMLInputElement>,\r\n  ) => {\r\n    if (event.target.checked) {\r\n      const contactIds = contactList.map((contact) => contact.id);\r\n      setCheckedContacts(contactIds);\r\n    } else {\r\n      setCheckedContacts([]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box mr={{xs: 1, xl: 2}}>\r\n      <Checkbox\r\n        color='primary'\r\n        indeterminate={\r\n          checkedContacts.length > 0 &&\r\n          checkedContacts.length < contactList.length\r\n        }\r\n        checked={\r\n          contactList.length > 0 &&\r\n          checkedContacts.length === contactList.length\r\n        }\r\n        onChange={onHandleMasterCheckbox}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CheckBox;\r\n","import Box from '@material-ui/core/Box';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport DeleteSharpIcon from '@material-ui/icons/DeleteSharp';\r\nimport LabelSharpIcon from '@material-ui/icons/LabelSharp';\r\nimport React from 'react';\r\nimport IntlMessages from '../../../../@crema/utility/IntlMessages';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  pointer: {\r\n    cursor: 'pointer',\r\n    display: 'block',\r\n  },\r\n}));\r\n\r\ninterface ContactCheckedActionsProps {\r\n  checkedContacts: string[];\r\n  setCheckedContacts: (checkedContacts: string[]) => void;\r\n  onSelectContactsForDelete: (checkedContacts: string[]) => void;\r\n}\r\n\r\nconst ContactCheckedActions: React.FC<ContactCheckedActionsProps> = ({\r\n  checkedContacts,\r\n  onSelectContactsForDelete,\r\n}) => {\r\n  const [, onOpenLabel] = React.useState<null | HTMLElement>(null);\r\n\r\n  const onLabelOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    onOpenLabel(event.currentTarget);\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box component='span' display='flex' alignItems='center' mr={{xl: 4}}>\r\n      <Tooltip title={<IntlMessages id='common.delete' />}>\r\n        <Box mr={4} component='span' color='text.secondary'>\r\n          <DeleteSharpIcon\r\n            className={classes.pointer}\r\n            onClick={() => onSelectContactsForDelete(checkedContacts)}\r\n          />\r\n        </Box>\r\n      </Tooltip>\r\n\r\n      <Tooltip title={<IntlMessages id='common.label' />}>\r\n        <Box\r\n          mr={4}\r\n          component='span'\r\n          color='text.secondary'\r\n          onClick={onLabelOpen}>\r\n          <LabelSharpIcon className={classes.pointer} />\r\n        </Box>\r\n      </Tooltip>\r\n\r\n      {/* <Menu\r\n        anchorEl={isLabelOpen}\r\n        keepMounted\r\n        elevation={0}\r\n        open={Boolean(isLabelOpen)}\r\n        onClose={onLabelClose}>\r\n        <MenuItem value={311} onClick={onSelectLabel}>\r\n          <IntlMessages id='common.crema' />\r\n        </MenuItem>\r\n        <MenuItem value={312} onClick={onSelectLabel}>\r\n          <IntlMessages id='common.personal' />\r\n        </MenuItem>\r\n        <MenuItem value={313} onClick={onSelectLabel}>\r\n          <IntlMessages id='common.work' />\r\n        </MenuItem>\r\n      </Menu> */}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ContactCheckedActions;\r\n","import React from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AppsIcon from '@material-ui/icons/Apps';\r\nimport clsx from 'clsx';\r\nimport ListIcon from '@material-ui/icons/List';\r\nimport Box from '@material-ui/core/Box';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport {CremaTheme} from '../../../../types/AppContextPropsType';\r\n\r\nconst useStyles = makeStyles((theme: CremaTheme) => ({\r\n  root: {\r\n    cursor: 'pointer',\r\n    '&.active': {\r\n      color: theme.palette.primary.main,\r\n    },\r\n  },\r\n}));\r\n\r\ninterface ViewSelectButtonsProps {\r\n  pageView: string;\r\n  onChangePageView: (pageView: string) => void;\r\n}\r\n\r\nconst ViewSelectButtons: React.FC<ViewSelectButtonsProps> = ({\r\n  pageView,\r\n  onChangePageView,\r\n}) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Box display='flex' alignItems='center' ml='auto'>\r\n      <IconButton onClick={() => onChangePageView('grid')}>\r\n        <AppsIcon\r\n          className={clsx(classes.root, {\r\n            active: pageView === 'grid',\r\n          })}\r\n        />\r\n      </IconButton>\r\n\r\n      <IconButton onClick={() => onChangePageView('list')}>\r\n        <ListIcon\r\n          className={clsx(classes.root, {\r\n            active: pageView === 'list',\r\n          })}\r\n        />\r\n      </IconButton>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ViewSelectButtons;\r\n","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport Box from '@material-ui/core/Box';\r\nimport SearchBar from '../../../../@crema/core/SearchBar';\r\nimport {Hidden, makeStyles} from '@material-ui/core';\r\nimport {useIntl} from 'react-intl';\r\nimport CheckBox from './CheckBox';\r\nimport ContactCheckedActions from './ContactCheckedActions';\r\nimport ViewSelectButtons from './ViewSelectButtons';\r\nimport AppsPagination from '../../../../@crema/core/AppsPagination';\r\nimport {AppState} from '../../../../redux/store';\r\nimport {ProductListObj} from '../../../../types/models/apps/ProductList';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  appsPaginationRoot: {\r\n    paddingLeft: 8,\r\n    paddingRight: 8,\r\n  },\r\n}));\r\n\r\ninterface ContactHeaderProps {\r\n  checkedContacts: string[];\r\n  setCheckedContacts: (checkedContacts: string[]) => void;\r\n  filterText: string;\r\n  onSetFilterText: (filterText: string) => void;\r\n  onChangePageView: (pageView: string) => void;\r\n  onSelectContactsForDelete: (ids: string[]) => void;\r\n  page: number;\r\n  onPageChange: (\r\n    event: React.MouseEvent<HTMLButtonElement> | null,\r\n    page: number,\r\n  ) => void;\r\n  pageView: string;\r\n}\r\n\r\nconst ContactHeader: React.FC<ContactHeaderProps> = ({\r\n  checkedContacts,\r\n  setCheckedContacts,\r\n  filterText,\r\n  onSetFilterText,\r\n  onChangePageView,\r\n  onSelectContactsForDelete,\r\n  page,\r\n  onPageChange,\r\n  pageView,\r\n}) => {\r\n  const {\r\n    contactList,\r\n    totalContacts,\r\n  }: {contactList: ProductListObj[]; totalContacts: number} = useSelector<\r\n    AppState,\r\n    AppState['productList']\r\n  >(({productList}) => productList);\r\n\r\n  const classes = useStyles();\r\n\r\n  const {messages} = useIntl();\r\n\r\n  return (\r\n    <>\r\n      <Box flex={1} display='flex' flexDirection='row' alignItems='center'>\r\n        <CheckBox\r\n          checkedContacts={checkedContacts}\r\n          setCheckedContacts={setCheckedContacts}\r\n        />\r\n\r\n        {checkedContacts.length > 0 ? (\r\n          <ContactCheckedActions\r\n            onSelectContactsForDelete={onSelectContactsForDelete}\r\n            checkedContacts={checkedContacts}\r\n            setCheckedContacts={setCheckedContacts}\r\n          />\r\n        ) : null}\r\n\r\n        <SearchBar\r\n          overlap={false}\r\n          value={filterText}\r\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\r\n            onSetFilterText(event.target.value)\r\n          }\r\n          placeholder={messages['common.searchHere'] as string}\r\n        />\r\n\r\n        <ViewSelectButtons\r\n          pageView={pageView}\r\n          onChangePageView={onChangePageView}\r\n        />\r\n      </Box>\r\n      <Hidden xsDown>\r\n        {contactList.length > 0 ? (\r\n          <AppsPagination\r\n            className={classes.appsPaginationRoot}\r\n            count={totalContacts}\r\n            page={page}\r\n            onPageChange={onPageChange}\r\n          />\r\n        ) : null}\r\n      </Hidden>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactHeader;\r\n","import { Box, Button } from '@material-ui/core';\r\nimport { grey } from '@material-ui/core/colors';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Form, useField } from 'formik';\r\nimport React from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { useIntl } from 'react-intl';\r\nimport Scrollbar from '../../../@crema/core/Scrollbar';\r\nimport IntlMessages from '../../../@crema/utility/IntlMessages';\r\nimport { Fonts } from '../../../shared/constants/AppEnums';\r\nimport { CremaTheme } from '../../../types/AppContextPropsType';\r\nimport { ProductListObj } from '../../../types/models/apps/ProductList';\r\n\r\nconst useStyles = makeStyles((theme: CremaTheme) => ({\r\n  avatar: {\r\n    width: 55,\r\n    height: 55,\r\n    marginBottom: 8,\r\n    cursor: 'pointer',\r\n  },\r\n  myTextField: {\r\n    width: '100%',\r\n    marginBottom: 16,\r\n    [theme.breakpoints.up('xl')]: {\r\n      marginBottom: 24,\r\n    },\r\n  },\r\n  btnRoot: {\r\n    paddingLeft: 32,\r\n    paddingRight: 32,\r\n  },\r\n  fieldRoot: {\r\n    width: '100%',\r\n    padding: 16,\r\n    backgroundColor: theme.palette.background.paper,\r\n    color: theme.palette.text.primary,\r\n  },\r\n  widthFull: {\r\n    width: '100%',\r\n  },\r\n  pointer: {\r\n    cursor: 'pointer',\r\n  },\r\n}));\r\nconst MyTextField = (props: any) => {\r\n  const [field, meta] = useField(props);\r\n  const errorText = meta.error && meta.touched ? meta.error : '';\r\n  return (\r\n    <TextField\r\n      {...props}\r\n      {...field}\r\n      helperText={errorText}\r\n      error={!!errorText}\r\n    />\r\n  );\r\n};\r\n\r\ninterface AddContactFormProps {\r\n  values: ProductListObj;\r\n  // userImage: string;\r\n  setUserImage?: (image: string) => void;\r\n  setFieldValue: (name: string, value: any) => void;\r\n  handleAddContactClose: () => void;\r\n}\r\n\r\nconst AddContactForm: React.FC<AddContactFormProps> = ({\r\n  values,\r\n  // userImage,\r\n\r\n  setUserImage,\r\n  setFieldValue,\r\n  handleAddContactClose,\r\n}) => {\r\n  const {getRootProps, getInputProps} = useDropzone({\r\n    accept: 'image/*',\r\n    onDrop: (acceptedFiles) => {\r\n      // setUserImage(URL.createObjectURL(acceptedFiles[0]));\r\n    },\r\n  });\r\n\r\n  const {messages} = useIntl();\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Form className='' noValidate autoComplete='off'>\r\n      <Box\r\n        p={5}\r\n        display='flex'\r\n        flexDirection='column'\r\n        alignItems='center'\r\n        borderBottom={`1px solid ${grey[300]}`}>\r\n        <Box {...getRootProps({className: 'dropzone'})}>\r\n          <input {...getInputProps()} />\r\n          <label htmlFor='icon-button-file'>\r\n            {/* <Avatar className={classes.avatar} src={userImage} /> */}\r\n          </label>\r\n        </Box>\r\n        <Box component='h4' fontWeight={Fonts.MEDIUM}>\r\n          {values.productName}\r\n        </Box>\r\n      </Box>\r\n\r\n      <Scrollbar style={{maxHeight: 600}}>\r\n        <Box py={5} px={{xs: 5, lg: 8, xl: 10}}>\r\n          <Box pb={5} mb={5} borderBottom={`1px solid ${grey[300]}`}>\r\n            <Box\r\n              component='h6'\r\n              mb={{xs: 4, xl: 6}}\r\n              fontSize={16}\r\n              fontWeight={Fonts.MEDIUM}>\r\n              <IntlMessages id='contactApp.personalDetails' />\r\n            </Box>\r\n\r\n            <Box px={{md: 5, lg: 8, xl: 10}}>\r\n              <MyTextField\r\n                required={true}\r\n                className={classes.myTextField}\r\n                variant='outlined'\r\n                label={<IntlMessages id='common.name' />}\r\n                name='name'\r\n              />\r\n\r\n              <MyTextField\r\n                required={true}\r\n                className={classes.myTextField}\r\n                variant='outlined'\r\n                label={<IntlMessages id='common.email' />}\r\n                name='email'\r\n              />\r\n\r\n              <MyTextField\r\n                required={true}\r\n                className={classes.myTextField}\r\n                variant='outlined'\r\n                label={<IntlMessages id='common.phone' />}\r\n                name='contact'\r\n              />\r\n            </Box>\r\n          </Box>\r\n\r\n          <Box pb={5} mb={5} borderBottom={`1px solid ${grey[300]}`}>\r\n            <Box\r\n              component='h6'\r\n              mb={{xs: 4, xl: 6}}\r\n              fontWeight={Fonts.MEDIUM}\r\n              fontSize={16}>\r\n              <IntlMessages id='common.otherDetails' />\r\n            </Box>\r\n\r\n            <Box px={{md: 5, lg: 8, xl: 10}}>\r\n              <MyTextField\r\n                required={true}\r\n                className={classes.widthFull}\r\n                variant='outlined'\r\n                label={<IntlMessages id='common.address' />}\r\n                name='address'\r\n              />\r\n            </Box>\r\n          </Box>\r\n\r\n          <Box pb={5} mb={5} borderBottom={`1px solid ${grey[300]}`}>\r\n            <Box\r\n              component='h6'\r\n              mb={{xs: 4, xl: 6}}\r\n              fontWeight={Fonts.MEDIUM}\r\n              fontSize={16}>\r\n              <IntlMessages id='common.socialMedia' />\r\n            </Box>\r\n\r\n            <Box px={{md: 5, lg: 8, xl: 10}}>\r\n              <MyTextField\r\n                className={classes.myTextField}\r\n                variant='outlined'\r\n                label={<IntlMessages id='common.facebookId' />}\r\n                name='facebookId'\r\n              />\r\n\r\n              <MyTextField\r\n                className={classes.widthFull}\r\n                variant='outlined'\r\n                label={<IntlMessages id='common.twitterId' />}\r\n                name='twitterId'\r\n              />\r\n            </Box>\r\n          </Box>\r\n\r\n          <Box>\r\n            <Box component='h6' mb={2} fontWeight={Fonts.MEDIUM} fontSize={16}>\r\n              <IntlMessages id='common.notes' />\r\n            </Box>\r\n\r\n            <MyTextField\r\n              name='notes'\r\n              multiline\r\n              className={classes.fieldRoot}\r\n              rows='4'\r\n              variant='outlined'\r\n              placeholder={messages['common.notes']}\r\n            />\r\n          </Box>\r\n        </Box>\r\n\r\n        <Box px={8} py={4} bgcolor='grey.300'>\r\n          <Button\r\n            className={classes.btnRoot}\r\n            color='secondary'\r\n            variant='contained'\r\n            type='submit'>\r\n            <IntlMessages id='common.save' />\r\n          </Button>\r\n          <Button\r\n            className={classes.btnRoot}\r\n            color='secondary'\r\n            onClick={handleAddContactClose}>\r\n            <IntlMessages id='common.cancel' />\r\n          </Button>\r\n        </Box>\r\n      </Scrollbar>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default AddContactForm;\r\n","import Dialog from '@material-ui/core/Dialog';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { makeStyles } from '@material-ui/core/styles/index';\r\nimport { TransitionProps } from '@material-ui/core/transitions';\r\nimport { Formik } from 'formik';\r\nimport React from 'react';\r\nimport { useIntl } from 'react-intl';\r\nimport { useDispatch } from 'react-redux';\r\nimport * as yup from 'yup';\r\nimport { Scrollbar } from '../../../@crema';\r\nimport {\r\n  onCreateProduct,\r\n  onUpdateSelectedProduct\r\n} from '../../../redux/actions/ProductList';\r\nimport { Fonts } from '../../../shared/constants/AppEnums';\r\nimport { ProductListObj } from '../../../types/models/apps/ProductList';\r\nimport AddContactForm from './AddContactForm';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  dialogBox: {\r\n    position: 'relative',\r\n    '& .MuiDialog-paperWidthSm': {\r\n      maxWidth: 600,\r\n      width: '100%',\r\n    },\r\n    '& .MuiTypography-h6': {\r\n      fontWeight: Fonts.LIGHT,\r\n    },\r\n  },\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n  props: TransitionProps & {children?: React.ReactElement<any, any>},\r\n  ref: React.Ref<unknown>,\r\n) {\r\n  return <Slide direction='up' ref={ref} {...props} />;\r\n});\r\n\r\ninterface CreateContactProps {\r\n  isAddContact: boolean;\r\n  handleAddContactClose: () => void;\r\n  selectContact?: ProductListObj | null;\r\n  onUpdateContact?: (newContact: ProductListObj) => void;\r\n}\r\n\r\nconst CreateContact: React.FC<CreateContactProps> = ({\r\n  isAddContact,\r\n  handleAddContactClose,\r\n  selectContact,\r\n  onUpdateContact,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n\r\n  // const [userImageUrl, setUserImageUrl] = useState<string>(\r\n  //   selectContact && selectContact.img?.length\r\n  //     ? selectContact.img[0].url\r\n  //     : '/assets/images/placeholder.jpg',\r\n  // );\r\n\r\n  const classes = useStyles();\r\n  const {messages} = useIntl();\r\n  const validationSchema = yup.object({\r\n    name: yup.string().required(messages['validation.nameRequired'] as string),\r\n    email: yup\r\n      .string()\r\n      .email(messages['validation.emailFormat'] as string)\r\n      .required(messages['validation.emailRequired'] as string),\r\n    contact: yup\r\n      .string()\r\n      .required(messages['validation.phoneNumberRequired'] as string),\r\n  });\r\n\r\n  return (\r\n    <Dialog\r\n      open={isAddContact}\r\n      onClose={() => handleAddContactClose()}\r\n      aria-labelledby='simple-modal-title'\r\n      TransitionComponent={Transition}\r\n      aria-describedby='simple-modal-description'\r\n      className={classes.dialogBox}>\r\n      <Scrollbar>\r\n        <Formik\r\n          validateOnChange={true}\r\n          initialValues={{\r\n            productName: selectContact ? selectContact.productName : '',\r\n            link: selectContact ? selectContact.link : '',\r\n            productPrice: selectContact ? selectContact.productPrice : '',\r\n            totalPplCnt: selectContact ? selectContact.totalPplCnt : '',\r\n            startPeriod: selectContact ? selectContact.startPeriod : '',\r\n            endPeriod: selectContact ? selectContact.endPeriod : '',\r\n            deliveryMethod: selectContact\r\n              ? selectContact.deliveryMethod\r\n              : '배송',\r\n            detailContent: selectContact ? selectContact.detailContent : '',\r\n            img: selectContact\r\n              ? selectContact.img\r\n                ? selectContact.img\r\n                : []\r\n              : [],\r\n          }}\r\n          validationSchema={validationSchema}\r\n          onSubmit={(data, {setSubmitting, resetForm}) => {\r\n            setSubmitting(true);\r\n            if (selectContact) {\r\n              const newContact = {\r\n                id: selectContact.id,\r\n                isStarred: selectContact.isStarred,\r\n                // img:selectContact.img\r\n                ...data,\r\n              };\r\n              dispatch(onUpdateSelectedProduct(newContact as ProductListObj));\r\n              onUpdateContact!(newContact as ProductListObj);\r\n            } else {\r\n              const newContact = {\r\n                id: String(Math.floor(Math.random() * 1000)),\r\n                isStarred: false,\r\n                // image: userImageUrl,\r\n                ...data,\r\n              };\r\n              dispatch(onCreateProduct(newContact as ProductListObj));\r\n            }\r\n            handleAddContactClose();\r\n            resetForm();\r\n            setSubmitting(false);\r\n          }}>\r\n          {({values, setFieldValue}) => (\r\n            <AddContactForm\r\n              // setUserImage={setUserImageUrl}\r\n              // userImage={userImageUrl}\r\n              values={values as ProductListObj}\r\n              setFieldValue={setFieldValue}\r\n              handleAddContactClose={handleAddContactClose}\r\n            />\r\n          )}\r\n        </Formik>\r\n      </Scrollbar>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default CreateContact;\r\n","import React from 'react';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport IntlMessages from '../../../../@crema/utility/IntlMessages';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {ProductListObj} from '../../../../types/models/apps/ProductList';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  pointer: {\r\n    cursor: 'pointer',\r\n  },\r\n}));\r\n\r\ninterface ItemMenuProps {\r\n  onSelectContactsForDelete: (ids: string[]) => void;\r\n  product: ProductListObj;\r\n  onChangeStarred: (isStarred: boolean, product: ProductListObj) => void;\r\n  onOpenEditContact: (product: ProductListObj) => void;\r\n}\r\n\r\nconst ItemMenu: React.FC<ItemMenuProps> = ({\r\n  onSelectContactsForDelete,\r\n  product: product,\r\n  onChangeStarred,\r\n  onOpenEditContact,\r\n}) => {\r\n  const [isMoreIcon, onOpenMoreIcon] = React.useState<null | HTMLElement>(null);\r\n\r\n  const onViewMoreOpen = (event: any) => {\r\n    onOpenMoreIcon(event.currentTarget);\r\n  };\r\n\r\n  const onViewMoreClose = () => {\r\n    onOpenMoreIcon(null);\r\n  };\r\n\r\n  const onDeleteContact = () => {\r\n    onSelectContactsForDelete([product.id]);\r\n    onViewMoreClose();\r\n  };\r\n\r\n  const onChangeStarredStatus = () => {\r\n    onChangeStarred(!product.isStarred, product);\r\n    onViewMoreClose();\r\n  };\r\n\r\n  const onClickEditOption = () => {\r\n    onOpenEditContact(product);\r\n    onViewMoreClose();\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <Tooltip title={<IntlMessages id='common.more' />}>\r\n        <MoreVertIcon className={classes.pointer} onClick={onViewMoreOpen} />\r\n      </Tooltip>\r\n      <Menu\r\n        anchorEl={isMoreIcon}\r\n        open={Boolean(isMoreIcon)}\r\n        onClose={onViewMoreClose}>\r\n        <MenuItem onClick={onChangeStarredStatus}>\r\n          {product.isStarred ? (\r\n            <IntlMessages id='common.unstarred' />\r\n          ) : (\r\n            <IntlMessages id='common.starred' />\r\n          )}\r\n        </MenuItem>\r\n\r\n        <MenuItem onClick={onClickEditOption}>\r\n          <IntlMessages id='common.edit' />\r\n        </MenuItem>\r\n        <MenuItem onClick={onDeleteContact}>\r\n          <IntlMessages id='common.delete' />\r\n        </MenuItem>\r\n      </Menu>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ItemMenu;\r\n","import React from 'react';\r\nimport {Card, makeStyles} from '@material-ui/core';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport PhoneIcon from '@material-ui/icons/Phone';\r\nimport BusinessIcon from '@material-ui/icons/Business';\r\nimport IntlMessages from '../../../../@crema/utility/IntlMessages';\r\nimport Box from '@material-ui/core/Box';\r\nimport ItemMenu from './ItemMenu';\r\nimport {blue, grey} from '@material-ui/core/colors';\r\nimport {Fonts} from '../../../../shared/constants/AppEnums';\r\nimport clsx from 'clsx';\r\nimport {CremaTheme} from '../../../../types/AppContextPropsType';\r\nimport {ProductListObj} from '../../../../types/models/apps/ProductList';\r\n\r\nconst useStyles = makeStyles((theme: CremaTheme) => ({\r\n  gridCard: {\r\n    borderRadius: theme.overrides.MuiCard.root.borderRadius,\r\n    boxShadow: '0 0 5px 1px rgba(0, 0, 0, 0.1)',\r\n    position: 'relative',\r\n    padding: 16,\r\n    [theme.breakpoints.up('xl')]: {\r\n      padding: 20,\r\n    },\r\n  },\r\n  checkboxRoot: {\r\n    marginTop: -8,\r\n    marginLeft: -8,\r\n  },\r\n  avatar: {\r\n    width: 50,\r\n    height: 50,\r\n    backgroundColor: blue[500],\r\n  },\r\n  truncate: {\r\n    overflow: 'hidden',\r\n    textOverflow: 'ellipsis',\r\n    whiteSpace: 'nowrap',\r\n  },\r\n  textBase: {\r\n    fontSize: 16,\r\n  },\r\n}));\r\n\r\ninterface ContactGridItemProps {\r\n  contact: ProductListObj;\r\n  onChangeStarred: (isStarred: boolean, contact: ProductListObj) => void;\r\n  onChangeCheckedContacts: (event: any, id: string) => void;\r\n  checkedContacts: string[];\r\n  onSelectContactsForDelete: (contactIds: string[]) => void;\r\n  onOpenEditContact: (contact: ProductListObj) => void;\r\n  onViewContactDetail: (contact: ProductListObj) => void;\r\n\r\n  [x: string]: any;\r\n}\r\n\r\nconst ContactGridItem: React.FC<ContactGridItemProps> = ({\r\n  contact,\r\n  onChangeCheckedContacts,\r\n  checkedContacts,\r\n  onChangeStarred,\r\n  onSelectContactsForDelete,\r\n  onOpenEditContact,\r\n  onViewContactDetail,\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card\r\n      className={clsx(classes.gridCard, 'card-hover')}\r\n      onClick={() => onViewContactDetail(contact)}>\r\n      <Box mb={2} display='flex' justifyContent='space-between'>\r\n        <Box component='span' onClick={(event) => event.stopPropagation()}>\r\n          <Checkbox\r\n            checked={checkedContacts.includes(contact.id)}\r\n            onChange={(event) => onChangeCheckedContacts(event, contact.id)}\r\n            color='primary'\r\n            className={classes.checkboxRoot}\r\n          />\r\n        </Box>\r\n\r\n        {/* {contact.image ? (\r\n          <Avatar className={classes.avatar} src={contact.image} />\r\n        ) : (\r\n          <Avatar className={classes.avatar}>\r\n            {contact.name[0].toUpperCase()}\r\n          </Avatar>\r\n        )} */}\r\n\r\n        <Box component='span' onClick={(event) => event.stopPropagation()}>\r\n          <ItemMenu\r\n            onSelectContactsForDelete={onSelectContactsForDelete}\r\n            product={contact}\r\n            onChangeStarred={onChangeStarred}\r\n            onOpenEditContact={onOpenEditContact}\r\n          />\r\n        </Box>\r\n      </Box>\r\n\r\n      <Box mb={{xs: 3, lg: 4, xl: 5}} textAlign='center'>\r\n        <Box fontWeight={Fonts.MEDIUM} fontSize={14}>\r\n          {contact.productName}\r\n        </Box>\r\n        <Box fontSize={14} className={classes.truncate}>\r\n          {contact.totalPplCnt ? contact.totalPplCnt : null}\r\n        </Box>\r\n      </Box>\r\n\r\n      <Box\r\n        py={3}\r\n        display='flex'\r\n        flexDirection={{xs: 'column', xl: 'row'}}\r\n        justifyContent={{xl: 'space-around'}}\r\n        fontSize={14}\r\n        borderTop={`2px solid ${grey[200]}`}>\r\n        <Box\r\n          px={3}\r\n          py={2}\r\n          width={{xl: 1 / 2}}\r\n          display='flex'\r\n          justifyContent='center'\r\n          alignItems='center'\r\n          borderTop={{xs: `1px solid ${grey[200]}`, xl: '0 none'}}\r\n          borderLeft={{xl: `1px solid ${grey[200]}`}}>\r\n          <PhoneIcon className={classes.textBase} />\r\n          <Box ml={2} className={classes.truncate}>\r\n            {contact.deliveryMethod}\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ContactGridItem;\r\n","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\n\r\ninterface LabelBoxProps {\r\n  name: string;\r\n  color: string;\r\n}\r\n\r\nconst LabelBox: React.FC<LabelBoxProps> = ({name, color}) => {\r\n  return (\r\n    <Box\r\n      component='span'\r\n      // ml={{xs: 'auto', sm: 4}}\r\n      px={3}\r\n      py={1}\r\n      color='primary.contrastText'\r\n      borderRadius='30px'\r\n      // fontSize={14}\r\n      bgcolor={color}>\r\n      {name}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default LabelBox;\r\n","import React from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Box from '@material-ui/core/Box';\r\nimport clsx from 'clsx';\r\nimport ItemMenu from './ItemMenu';\r\nimport AppsStarredIcon from '../../../../@crema/core/AppsStarredIcon';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {Fonts} from '../../../../shared/constants/AppEnums';\r\nimport {ProductListObj} from '../../../../types/models/apps/ProductList';\r\nimport LabelBox from './LableBox';\r\nimport {\r\n  lime,\r\n  lightBlue,\r\n  deepOrange,\r\n  pink,\r\n  green,\r\n  grey,\r\n  red,\r\n} from '@material-ui/core/colors';\r\nimport {Hidden} from '@material-ui/core';\r\n\r\ninterface ContactListItemProps {\r\n  product: ProductListObj;\r\n  onChangeStarred: (isStarred: boolean, product: ProductListObj) => void;\r\n  onChangeCheckedContacts: (event: any, id: string) => void;\r\n  checkedContacts: string[];\r\n  onSelectContactsForDelete: (contactIds: string[]) => void;\r\n  onOpenEditContact: (product: ProductListObj) => void;\r\n  onViewContactDetail: (product: ProductListObj) => void;\r\n\r\n  [x: string]: any;\r\n}\r\n\r\nconst ContactListItem: React.FC<ContactListItemProps> = ({\r\n  product: product,\r\n  onChangeCheckedContacts,\r\n  checkedContacts,\r\n  onChangeStarred,\r\n  onSelectContactsForDelete,\r\n  onViewContactDetail,\r\n  onOpenEditContact,\r\n}) => {\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      alignItems: 'center',\r\n      borderBottom: `1px solid ${grey[300]}`,\r\n      paddingTop: 8,\r\n      paddingBottom: 8,\r\n      fontSize: 12,\r\n      paddingLeft: 20,\r\n      paddingRight: 20,\r\n      cursor: 'pointer',\r\n      '&.rootCheck': {\r\n        fontWeight: Fonts.LIGHT,\r\n        backgroundColor: grey[200],\r\n      },\r\n    },\r\n    truncate: {\r\n      overflow: 'hidden',\r\n      textOverflow: 'ellipsis',\r\n      whiteSpace: 'nowrap',\r\n    },\r\n    avatar: {\r\n      backgroundColor: grey[700],\r\n      fontSize: 11,\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n  console.log('====================================');\r\n  console.log(product.img && product.img[0].url);\r\n  console.log('====================================');\r\n\r\n  //카테고리 계산\r\n  let cateLabel = {name: '', color: ''};\r\n  cateLabel.name = product.category;\r\n  switch (cateLabel.name) {\r\n    case '음식':\r\n      cateLabel.color = lime[500];\r\n      break;\r\n    case '생활용품':\r\n      cateLabel.color = deepOrange[500];\r\n      break;\r\n    case '주방':\r\n      cateLabel.color = pink[500];\r\n      break;\r\n    case '욕실':\r\n      cateLabel.color = red[500];\r\n      break;\r\n    case '문구':\r\n      cateLabel.color = lightBlue[500];\r\n      break;\r\n    case '기타':\r\n      cateLabel.color = green[500];\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  //배송중 계산\r\n  let deliverLabel = {name: '', color: ''};\r\n  deliverLabel.name = product.deliveryMethod;\r\n  switch (deliverLabel.name) {\r\n    case '배송':\r\n      deliverLabel.color = lightBlue[500];\r\n      break;\r\n    case '직거래':\r\n      deliverLabel.color = deepOrange[500];\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ListItem\r\n        dense\r\n        button\r\n        key={product.id}\r\n        className={clsx(classes.root, 'item-hover', {\r\n          rootCheck: checkedContacts.includes(product.id),\r\n        })}\r\n        onClick={() => onViewContactDetail(product)}>\r\n        {/* 체크박스 */}\r\n        <Box\r\n          mr={{xs: 1, sm: 2}}\r\n          component='span'\r\n          onClick={(event) => event.stopPropagation()}>\r\n          <Checkbox\r\n            checked={checkedContacts.includes(product.id)}\r\n            onChange={(event) => onChangeCheckedContacts(event, product.id)}\r\n            color='primary'\r\n          />\r\n        </Box>\r\n\r\n        {/* 진행중 토글 */}\r\n        <Box component='span' flex={1} mx={2}>\r\n          {product.activated === '0' ? (\r\n            <LabelBox name='진행중' color={green[500]} />\r\n          ) : (\r\n            <LabelBox name='종료' color={grey[500]} />\r\n          )}\r\n        </Box>\r\n\r\n        {/* 사진 */}\r\n        <Box mr={3} component='span'>\r\n          {product.img && product.img.length > 0 ? (\r\n            <Avatar src={product.img[0].url} />\r\n          ) : (\r\n            <Avatar className={classes.avatar}>{'사진없음'}</Avatar>\r\n          )}\r\n        </Box>\r\n        {/* 제품이름 */}\r\n        <Box\r\n          mr={4}\r\n          fontWeight={Fonts.MEDIUM}\r\n          component='span'\r\n          flex={1.3}\r\n          className={classes.truncate}>\r\n          {product.productName}\r\n        </Box>\r\n\r\n        {/* 참여인원 */}\r\n        <Box\r\n          mr={4}\r\n          fontWeight={Fonts.MEDIUM}\r\n          component='span'\r\n          flex={0.8}\r\n          className={classes.truncate}>\r\n          {product.joinPplCnt + ' / ' + product.totalPplCnt + ' 명'}\r\n        </Box>\r\n\r\n        {/*시작 종료 기간*/}\r\n        <Box\r\n          component='span'\r\n          mr={4}\r\n          flex={1.6}\r\n          display={{xs: 'none', md: 'block'}}>\r\n          <Box component='span' className={classes.truncate}>\r\n            {product.startPeriod + '   ~   ' + product.endPeriod}\r\n          </Box>\r\n        </Box>\r\n\r\n        {/* 제품가격 */}\r\n        <Box\r\n          component='span'\r\n          mr={4}\r\n          flex={0.8}\r\n          display={{xs: 'none', sm: 'block'}}\r\n          className={classes.truncate}>\r\n          <Box component='span' className={classes.truncate}>\r\n            {product.productPrice ? product.productPrice + ' 원' : null}\r\n          </Box>\r\n        </Box>\r\n\r\n        {/* 카테고리 */}\r\n        {/* <Hidden smDown> */}\r\n        <Box\r\n          component='span'\r\n          flex={1}\r\n          mr={2}\r\n          display={{xs: 'none', sm: 'block'}}>\r\n          <LabelBox name={cateLabel.name} color={cateLabel.color} />\r\n        </Box>\r\n        {/* </Hidden> */}\r\n\r\n        {/* 배송상태 */}\r\n        <Box\r\n          component='span'\r\n          mr={2}\r\n          flex={1}\r\n          display={{xs: 'none', sm: 'block'}}>\r\n          <LabelBox name={deliverLabel.name} color={deliverLabel.color} />\r\n        </Box>\r\n\r\n        {/* 별 */}\r\n        <Box\r\n          component='span'\r\n          ml='auto'\r\n          mr={{xl: 4}}\r\n          display='flex'\r\n          alignItems='center'>\r\n          <Box component='span' onClick={(event) => event.stopPropagation()}>\r\n            <AppsStarredIcon item={product} onChange={onChangeStarred} />\r\n          </Box>\r\n\r\n          <Box\r\n            component='span'\r\n            ml={2}\r\n            onClick={(event) => event.stopPropagation()}>\r\n            <ItemMenu\r\n              onSelectContactsForDelete={onSelectContactsForDelete}\r\n              product={product}\r\n              onChangeStarred={onChangeStarred}\r\n              onOpenEditContact={onOpenEditContact}\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </ListItem>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactListItem;\r\n","import Box from '@material-ui/core/Box';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport React from 'react';\r\nimport AppGrid from '../../../../@crema/core/AppGrid';\r\nimport AppList from '../../../../@crema/core/AppList';\r\nimport ListEmptyResult from '../../../../@crema/core/AppList/ListEmptyResult';\r\nimport ContactListSkeleton from '../../../../@crema/core/Skeleton/ContactListSkeleton';\r\nimport IntlMessages from '../../../../@crema/utility/IntlMessages';\r\nimport {ProductListObj} from '../../../../types/models/apps/ProductList';\r\nimport ContactGridItem from './ContactGridItem';\r\nimport ContactListItem from './ContactListItem';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    paddingTop: 0,\r\n    paddingBottom: 0,\r\n    flex: 1,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n}));\r\n\r\ninterface ContactViewContentProps {\r\n  list: ProductListObj[];\r\n  pageView: string;\r\n  loading: boolean;\r\n  handleAddContactOpen: () => void;\r\n  onChangeStarred: (isStarred: boolean, contact: ProductListObj) => void;\r\n  onChangeCheckedContacts: (event: any, id: string) => void;\r\n  checkedContacts: string[];\r\n  onSelectContactsForDelete: (contactIds: string[]) => void;\r\n  onOpenEditContact: (contact: ProductListObj) => void;\r\n  onViewContactDetail: (contact: ProductListObj) => void;\r\n}\r\n\r\nconst ContactViewContent: React.FC<ContactViewContentProps> = ({\r\n  list,\r\n  pageView,\r\n  loading,\r\n  handleAddContactOpen,\r\n  onChangeStarred,\r\n  onChangeCheckedContacts,\r\n  checkedContacts,\r\n  onSelectContactsForDelete,\r\n  onOpenEditContact,\r\n  onViewContactDetail,\r\n}) => {\r\n  const classes = useStyles();\r\n  let test = 0;\r\n  // console.log('======================ContactViewContent.tsx');\r\n  // console.log(list);\r\n  // console.log('====================================');\r\n  return (\r\n    <>\r\n      {/* list 아니면 grid지 뭐.. */}\r\n      {pageView === 'list' ? (\r\n        <AppList\r\n          data={list}\r\n          animation='transition.slideUpIn'\r\n          className={classes.root}\r\n          ListEmptyComponent={\r\n            <ListEmptyResult\r\n              loading={loading}\r\n              actionTitle={<IntlMessages id='contactApp.createContact' />}\r\n              onClick={handleAddContactOpen}\r\n              placeholder={<ContactListSkeleton />}\r\n            />\r\n          }\r\n\r\n          renderRow={(product) => (\r\n            <ContactListItem\r\n              key={product.id}\r\n              product={product}\r\n              onChangeCheckedContacts={onChangeCheckedContacts}\r\n              checkedContacts={checkedContacts}\r\n              onSelectContactsForDelete={onSelectContactsForDelete}\r\n              onChangeStarred={onChangeStarred}\r\n              onViewContactDetail={onViewContactDetail}\r\n              onOpenEditContact={onOpenEditContact}\r\n            />\r\n          )}\r\n        />\r\n      ) : (\r\n        <Box p={6}>\r\n          <AppGrid\r\n            responsive={{\r\n              xs: 1,\r\n              sm: 2,\r\n              md: 3,\r\n              lg: 3,\r\n              xl: 3,\r\n            }}\r\n            data={list}\r\n            renderRow={(contact) => {\r\n              return (\r\n                <ContactGridItem\r\n                  key={contact.id}\r\n                  contact={contact}\r\n                  onChangeCheckedContacts={onChangeCheckedContacts}\r\n                  checkedContacts={checkedContacts}\r\n                  onChangeStarred={onChangeStarred}\r\n                  onSelectContactsForDelete={onSelectContactsForDelete}\r\n                  onViewContactDetail={onViewContactDetail}\r\n                  onOpenEditContact={onOpenEditContact}\r\n                />\r\n              );\r\n            }}\r\n          />\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default ContactViewContent;\r\n","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AppsStarredIcon from '../../../@crema/core/AppsStarredIcon';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {ProductListObj} from '../../../types/models/apps/ProductList';\r\n\r\ninterface ContactActionsProps {\r\n  contact: ProductListObj;\r\n  onDeleteContact: () => void;\r\n  onChangeStarred: (checked: boolean, item: any) => void;\r\n  onOpenEditContact: (contact: ProductListObj) => void;\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  pointer: {\r\n    cursor: 'pointer',\r\n  },\r\n}));\r\n\r\nconst ContactActions: React.FC<ContactActionsProps> = ({\r\n  onDeleteContact,\r\n  onChangeStarred,\r\n  onOpenEditContact,\r\n  contact,\r\n}) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Box display='flex' justifyContent='flex-end' alignItems='center'>\r\n      <Box ml={2}>\r\n        <EditIcon\r\n          className={classes.pointer}\r\n          onClick={() => onOpenEditContact(contact)}\r\n        />\r\n      </Box>\r\n      <Box ml={2}>\r\n        <AppsStarredIcon item={contact} onChange={onChangeStarred} />\r\n      </Box>\r\n      <Box ml={2}>\r\n        <DeleteIcon className={classes.pointer} onClick={onDeleteContact} />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ContactActions;\r\n","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport IntlMessages from '../../../@crema/utility/IntlMessages';\r\nimport {useIntl} from 'react-intl';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {Fonts} from '../../../shared/constants/AppEnums';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {ProductListObj} from '../../../types/models/apps/ProductList';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  textareaAutosizeRoot: {\r\n    width: '100%',\r\n  },\r\n}));\r\n\r\ninterface NotesProps {\r\n  contact: ProductListObj;\r\n}\r\n\r\nconst Notes: React.FC<NotesProps> = ({contact}) => {\r\n  const {messages} = useIntl();\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box pr={{xs: 5, lg: 8, xl: 10}} py={5}>\r\n      <Box component='h6' m={2} fontWeight={Fonts.MEDIUM} fontSize={16}>\r\n        <IntlMessages id='common.notes' />\r\n      </Box>\r\n\r\n      <TextField\r\n        multiline\r\n        className={classes.textareaAutosizeRoot}\r\n        rows='4'\r\n        placeholder={messages['common.notes'] as string}\r\n        name='notes'\r\n        value={contact.detailContent}\r\n        variant='outlined'\r\n        disabled\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Notes;\r\n","import Box from '@material-ui/core/Box';\r\nimport { grey } from '@material-ui/core/colors';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport PhoneIcon from '@material-ui/icons/Phone';\r\nimport React from 'react';\r\nimport IntlMessages from '../../../@crema/utility/IntlMessages';\r\nimport { Fonts } from '../../../shared/constants/AppEnums';\r\nimport { ProductListObj } from '../../../types/models/apps/ProductList';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  borderBottomClass: {\r\n    borderBottom: `1px solid ${grey[300]}`,\r\n  },\r\n  iconRoot: {\r\n    fontSize: 16,\r\n    color: 'grey.600',\r\n  },\r\n}));\r\n\r\ninterface PersonalDetailsProps {\r\n  contact: ProductListObj;\r\n}\r\n\r\nconst PersonalDetails: React.FC<PersonalDetailsProps> = ({contact}) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Box\r\n      pr={{xs: 5, lg: 8, xl: 10}}\r\n      pb={5}\r\n      className={classes.borderBottomClass}>\r\n      <Box component='h6' mb={2} fontWeight={Fonts.MEDIUM} fontSize={16}>\r\n        <IntlMessages id='contactApp.personalDetails' />\r\n      </Box>\r\n\r\n      <Box px={{xs: 5, lg: 8, xl: 10}}>\r\n        <Box mb={2} display='flex' alignItems='center'>\r\n          {' '}\r\n          <EmailIcon className={classes.iconRoot} />{' '}\r\n          <Box ml={2} fontSize={14} color='text.secondary'>\r\n            {contact.productPrice}\r\n          </Box>\r\n        </Box>\r\n\r\n        <Box mb={2} display='flex' alignItems='center'>\r\n          <PhoneIcon className={classes.iconRoot} />\r\n          <Box ml={2} color='text.secondary' fontSize={14}>\r\n            {contact.startPeriod}\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PersonalDetails;\r\n","import Box from '@material-ui/core/Box';\r\nimport { grey } from '@material-ui/core/colors';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { TransitionProps } from '@material-ui/core/transitions';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Scrollbar } from '../../../@crema';\r\nimport { onUpdateSelectedProduct } from '../../../redux/actions/ProductList';\r\nimport { Fonts } from '../../../shared/constants/AppEnums';\r\nimport { ProductListObj } from '../../../types/models/apps/ProductList';\r\nimport ContactActions from './ContactActions';\r\nimport Notes from './Notes';\r\nimport PersonalDetails from './PersonalDetails';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  dialogBox: {\r\n    position: 'relative',\r\n    '& .MuiDialog-paperWidthSm': {\r\n      maxWidth: 600,\r\n      width: '100%',\r\n    },\r\n    '& .MuiTypography-h6': {\r\n      fontWeight: Fonts.LIGHT,\r\n    },\r\n  },\r\n  pointer: {\r\n    cursor: 'pointer',\r\n  },\r\n  avatar: {\r\n    width: 140,\r\n    height: 140,\r\n    marginBottom: 8,\r\n  },\r\n  borderBottomClass: {\r\n    borderBottom: `1px solid ${grey[300]}`,\r\n  },\r\n}));\r\nconst Transition = React.forwardRef(function Transition(\r\n  props: TransitionProps & {children?: React.ReactElement<any, any>},\r\n  ref: React.Ref<unknown>,\r\n) {\r\n  return <Slide direction='up' ref={ref} {...props} />;\r\n});\r\n\r\ninterface ContactDetailProps {\r\n  isShowDetail: boolean;\r\n  selectedContact: ProductListObj | null;\r\n  onShowDetail: (show: boolean) => void;\r\n  onSelectContactsForDelete: (ids: string[]) => void;\r\n  onOpenEditContact: (contact: ProductListObj) => void;\r\n}\r\n\r\nconst ContactDetail: React.FC<ContactDetailProps> = ({\r\n  isShowDetail,\r\n  selectedContact,\r\n  onShowDetail,\r\n  onSelectContactsForDelete,\r\n  onOpenEditContact,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [contact, setContact] = useState<ProductListObj | null>(\r\n    selectedContact,\r\n  );\r\n\r\n  useEffect(() => {\r\n    setContact(selectedContact);\r\n  }, [selectedContact]);\r\n\r\n  const onChangeStarred = (checked: boolean) => {\r\n    const updatedContact = contact;\r\n    contact!.isStarred = checked;\r\n    setContact(updatedContact);\r\n    dispatch(onUpdateSelectedProduct(contact!));\r\n  };\r\n\r\n  const onDeleteContact = () => {\r\n    onSelectContactsForDelete([contact!.id]);\r\n    onShowDetail(false);\r\n  };\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <Dialog\r\n        open={isShowDetail}\r\n        onClose={() => onShowDetail(false)}\r\n        TransitionComponent={Transition}\r\n        aria-labelledby='simple-modal-title'\r\n        aria-describedby='simple-modal-description'\r\n        className={classes.dialogBox}>\r\n        <Scrollbar>\r\n          <Box p={5} className={classes.borderBottomClass}>\r\n            <ContactActions\r\n              onChangeStarred={onChangeStarred}\r\n              onDeleteContact={onDeleteContact}\r\n              // 수정 모달 열기\r\n              onOpenEditContact={onOpenEditContact}\r\n              contact={contact!}\r\n            />\r\n            <Box\r\n              mt={{sm: -3}}\r\n              display='flex'\r\n              flexDirection='column'\r\n              alignItems='center'>\r\n              {/* {contact!.image ? (\r\n                <Avatar className={classes.avatar} src={contact!.image} />\r\n              ) : (\r\n                <Avatar className={classes.avatar}>\r\n                  {contact!.name[0].toUpperCase()}\r\n                </Avatar>\r\n              )} */}\r\n              <Box component='h4' fontWeight={Fonts.MEDIUM}>\r\n                {contact!.productName}\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n\r\n          <Box py={5} pl={{xs: 8, lg: 8, lx: 10}}>\r\n            <Scrollbar style={{maxHeight: 400}}>\r\n              {contact ? <PersonalDetails contact={contact} /> : null}\r\n              {/* {contact ? <OtherDetails contact={contact} /> : null} */}\r\n              {/* {contact ? <SocialMedia contact={contact} /> : null} */}\r\n              {contact ? <Notes contact={contact} /> : null}\r\n            </Scrollbar>\r\n          </Box>\r\n        </Scrollbar>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactDetail;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {useLocation} from 'react-router-dom';\r\nimport {\r\n  onDeleteProducts,\r\n  onGetProductList,\r\n  onUpdateStarredStatus,\r\n} from '../../../redux/actions/ProductList';\r\nimport ContactHeader from './ContactHeader';\r\nimport ConfirmationDialog from '../../../@crema/core/ConfirmationDialog';\r\nimport IntlMessages from '../../../@crema/utility/IntlMessages';\r\nimport CreateProduct from '../ProductContact';\r\nimport {Hidden} from '@material-ui/core';\r\nimport ContactViewContent from './ContactViewContent';\r\nimport ProductDetail from '../ProductDetail';\r\nimport AppsPagination from '../../../@crema/core/AppsPagination';\r\nimport AppsHeader from '../../../@crema/core/AppsContainer/AppsHeader';\r\nimport AppsContent from '../../../@crema/core/AppsContainer/AppsContent';\r\nimport AppsFooter from '../../../@crema/core/AppsContainer/AppsFooter';\r\nimport {AppState} from '../../../redux/store';\r\nimport {ProductListObj} from '../../../types/models/apps/ProductList';\r\n\r\nconst ContactListing = () => {\r\n  const dispatch = useDispatch();\r\n  const {pathname} = useLocation();\r\n\r\n  const {\r\n    contactList,\r\n    totalContacts,\r\n  }: {contactList: ProductListObj[]; totalContacts: number} = useSelector<\r\n    AppState,\r\n    AppState['productList']\r\n  >(({productList}) => productList);\r\n\r\n  const [filterText, onSetFilterText] = useState('');\r\n  const [page, setPage] = useState(0);\r\n  const [pageView, setPageView] = useState<string>('list');\r\n  const [isDeleteDialogOpen, setDeleteDialogOpen] = useState<boolean>(false);\r\n  const [checkedContacts, setCheckedContacts] = useState<string[]>([]);\r\n  const [toDeleteContacts, setToDeleteContacts] = useState<string[]>([]);\r\n  const [isAddContact, onSetIsAddContact] = useState<boolean>(false);\r\n  const [isShowDetail, onShowDetail] = useState<boolean>(false);\r\n  const [selectedContact, setSelectedContact] = useState<ProductListObj | null>(\r\n    null,\r\n  );\r\n\r\n  const {loading} = useSelector<AppState, AppState['common']>(\r\n    ({common}) => common,\r\n  );\r\n\r\n  useEffect(() => {\r\n    setPage(0);\r\n  }, [pathname]);\r\n\r\n  useEffect(() => {\r\n    const path = pathname.split('/');\r\n    dispatch(\r\n      onGetProductList(path[path.length - 2], path[path.length - 1], page),\r\n    );\r\n  }, [pathname, pageView, page, dispatch]);\r\n\r\n  const handleAddContactOpen = () => {\r\n    onSetIsAddContact(true);\r\n  };\r\n\r\n  const handleAddContactClose = () => {\r\n    onSetIsAddContact(false);\r\n  };\r\n\r\n  const onViewContactDetail = (product: ProductListObj) => {\r\n    setSelectedContact(product);\r\n    onShowDetail(true);\r\n  };\r\n\r\n  const onOpenEditContact = (product: ProductListObj) => {\r\n    setSelectedContact(product);\r\n    handleAddContactOpen();\r\n  };\r\n\r\n  const onPageChange = (\r\n    event: React.MouseEvent<HTMLButtonElement> | null,\r\n    value: number,\r\n  ) => {\r\n    setPage(value);\r\n  };\r\n\r\n  const onChangePageView = (view: string) => {\r\n    setPageView(view);\r\n  };\r\n\r\n  const onChangeCheckedContacts = (event: any, id: string) => {\r\n    if (event.target.checked) {\r\n      setCheckedContacts(checkedContacts.concat(id));\r\n    } else {\r\n      setCheckedContacts(\r\n        checkedContacts.filter((contactId) => contactId !== id),\r\n      );\r\n    }\r\n  };\r\n\r\n  const onChangeStarred = (status: boolean, product: ProductListObj) => {\r\n    const selectedIdList = [product.id];\r\n    const path = pathname.split('/');\r\n    dispatch(\r\n      onUpdateStarredStatus(selectedIdList, status, path[path.length - 1]),\r\n    );\r\n  };\r\n\r\n  const onUpdateContact = (product: ProductListObj) => {\r\n    setSelectedContact(product);\r\n    handleAddContactClose();\r\n  };\r\n\r\n  const onGetFilteredItems = () => {\r\n    if (filterText === '') {\r\n      return contactList;\r\n    } else {\r\n      return contactList.filter((product: ProductListObj) =>\r\n        product.productName.toUpperCase().includes(filterText.toUpperCase()),\r\n      );\r\n    }\r\n  };\r\n\r\n  const onDeleteSelectedContacts = () => {\r\n    const path = pathname.split('/');\r\n    dispatch(\r\n      onDeleteProducts(\r\n        path[path.length - 2],\r\n        path[path.length - 1],\r\n        toDeleteContacts,\r\n        page,\r\n      ),\r\n    );\r\n    setDeleteDialogOpen(false);\r\n    setCheckedContacts([]);\r\n  };\r\n\r\n  const onSelectContactsForDelete = (contactIds: string[]) => {\r\n    setToDeleteContacts(contactIds);\r\n    setDeleteDialogOpen(true);\r\n  };\r\n\r\n  const list = onGetFilteredItems();\r\n\r\n  return (\r\n    <>\r\n      {/* 헤더 */}\r\n      <AppsHeader>\r\n        <ContactHeader\r\n          checkedContacts={checkedContacts}\r\n          setCheckedContacts={setCheckedContacts}\r\n          filterText={filterText}\r\n          onSelectContactsForDelete={onSelectContactsForDelete}\r\n          onSetFilterText={onSetFilterText}\r\n          onPageChange={onPageChange}\r\n          page={page}\r\n          onChangePageView={onChangePageView}\r\n          pageView={pageView}\r\n        />\r\n      </AppsHeader>\r\n\r\n      {/* 테이블 */}\r\n      <AppsContent>\r\n        <ContactViewContent\r\n          list={list}\r\n          loading={loading}\r\n          pageView={pageView}\r\n          handleAddContactOpen={handleAddContactOpen}\r\n          onChangeCheckedContacts={onChangeCheckedContacts}\r\n          onChangeStarred={onChangeStarred}\r\n          checkedContacts={checkedContacts}\r\n          onSelectContactsForDelete={onSelectContactsForDelete}\r\n          onViewContactDetail={onViewContactDetail}\r\n          onOpenEditContact={onOpenEditContact}\r\n        />\r\n      </AppsContent>\r\n\r\n      {/* 600px 업일때 숨겨지는 푸터내 페이지네이션 */}\r\n      <Hidden smUp>\r\n        {contactList.length > 0 ? (\r\n          <AppsFooter>\r\n            <AppsPagination\r\n              count={totalContacts}\r\n              page={page}\r\n              onPageChange={onPageChange}\r\n            />\r\n          </AppsFooter>\r\n        ) : null}\r\n      </Hidden>\r\n\r\n      {/* 아래는 다 모달 형식으로 C,R,D 표시  */}\r\n      {isAddContact ? (\r\n        <CreateProduct\r\n          isAddContact={isAddContact}\r\n          handleAddContactClose={handleAddContactClose}\r\n          selectContact={selectedContact}\r\n          onUpdateContact={onUpdateContact}\r\n        />\r\n      ) : null}\r\n\r\n      {isShowDetail ? (\r\n        <ProductDetail\r\n          selectedContact={selectedContact}\r\n          isShowDetail={isShowDetail}\r\n          onShowDetail={onShowDetail}\r\n          onSelectContactsForDelete={onSelectContactsForDelete}\r\n          onOpenEditContact={onOpenEditContact}\r\n        />\r\n      ) : null}\r\n\r\n      {isDeleteDialogOpen ? (\r\n        <ConfirmationDialog\r\n          open={isDeleteDialogOpen}\r\n          onDeny={setDeleteDialogOpen}\r\n          onConfirm={onDeleteSelectedContacts}\r\n          title={<IntlMessages id='product.deleteContact' />}\r\n          dialogTitle={<IntlMessages id='common.deleteItem' />}\r\n        />\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactListing;\r\n","import Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport React, {useState} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport IntlMessages from '../../../@crema/utility/IntlMessages';\r\nimport Scrollbar from '../../../@crema/core/Scrollbar';\r\nimport CreateProduct from '../ProductContact';\r\nimport AppsSideBarFolderItem from '../../../@crema/core/AppsSideBarFolderItem';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {Fonts} from '../../../shared/constants/AppEnums';\r\nimport AppList from '../../../@crema/core/AppList';\r\nimport AppAnimate from '../../../@crema/core/AppAnimate';\r\nimport ListEmptyResult from '../../../@crema/core/AppList/ListEmptyResult';\r\nimport SidebarPlaceholder from '../../../@crema/core/Skeleton/SidebarListSkeleton';\r\nimport {CremaTheme} from '../../../types/AppContextPropsType';\r\nimport {AppState} from '../../../redux/store';\r\n\r\nconst useStyles = makeStyles((theme: CremaTheme) => ({\r\n  btnRoot: {\r\n    width: '100%',\r\n    fontSize: 16,\r\n    textTransform: 'capitalize',\r\n    fontWeight: Fonts.MEDIUM,\r\n  },\r\n  listRoot: {\r\n    marginBottom: 8,\r\n    [theme.breakpoints.up('xl')]: {\r\n      marginBottom: 20,\r\n    },\r\n  },\r\n}));\r\n\r\nconst SideBarContent: React.FC<{}> = () => {\r\n  const {folderList} = useSelector<AppState, AppState['productList']>(\r\n    ({productList}) => productList,\r\n  );\r\n\r\n  const [isAddContact, onSetIsAddContact] = useState(false);\r\n\r\n  const handleAddContactOpen = () => {\r\n    onSetIsAddContact(true);\r\n  };\r\n\r\n  const handleAddContactClose = () => {\r\n    onSetIsAddContact(false);\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      {/*제품 추가*/}\r\n      <Box px={{xs: 4, md: 5}} pt={{xs: 4, md: 5}} pb={{xs: 2, xl: 5}}>\r\n        <AppAnimate>\r\n          <Button\r\n            variant='contained'\r\n            color='secondary'\r\n            className={classes.btnRoot}\r\n            onClick={handleAddContactOpen}>\r\n            <IntlMessages id='contactApp.createContact' />\r\n          </Button>\r\n        </AppAnimate>\r\n      </Box>\r\n\r\n      <Scrollbar className='scroll-app-sidebar'>\r\n        <Box\r\n          px={{xs: 4, md: 5, lg: 6, xl: 8}}\r\n          pb={{xs: 4, md: 5, lg: 6, xl: 8}}\r\n          pt={0}>\r\n          <List\r\n            className={classes.listRoot}\r\n            component='nav'\r\n            aria-label='main task folders'>\r\n            <AppList\r\n              animation='transition.slideLeftIn'\r\n              data={folderList}\r\n              ListEmptyComponent={\r\n                <ListEmptyResult\r\n                  loading={true}\r\n                  placeholder={<SidebarPlaceholder />}\r\n                />\r\n              }\r\n              renderRow={(item) => (\r\n                <AppsSideBarFolderItem\r\n                  key={item.id}\r\n                  item={item}\r\n                  path={`/product/folder/${item.alias}`}\r\n                />\r\n              )}\r\n            />\r\n          </List>\r\n          {isAddContact ? (\r\n            <CreateProduct\r\n              isAddContact={isAddContact}\r\n              handleAddContactClose={handleAddContactClose}\r\n            />\r\n          ) : null}\r\n        </Box>\r\n      </Scrollbar>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SideBarContent;\r\n","import React, {useEffect} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {onGetFolderList} from '../../redux/actions/ProductList';\nimport ProductListing from './ProductListing';\nimport {useIntl} from 'react-intl';\nimport AppsContainer from '../../@crema/core/AppsContainer';\nimport SideBarContent from './ProductSideBar';\n\nconst Product = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(onGetFolderList());\n  }, [dispatch]);\n\n  const {messages} = useIntl();\n  return (\n    <AppsContainer\n      title={messages['product'] as string}\n      sidebarContent={<SideBarContent />}>\n      <ProductListing />\n    </AppsContainer>\n  );\n};\n\nexport default Product;\n"],"sourceRoot":""}